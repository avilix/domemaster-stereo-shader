//==================================================================
// Mental Ray Indirect Lighting Tab
//==================================================================

global proc miCreateIbl()
{
	string $iblNode = `shadingNode -asLight mentalrayIblShape`;
	string $children[] = `listRelatives $iblNode`;
	$iblNode = $children[0];

	if (size($iblNode)) {

	string $oldNode[] =
		`listConnections "mentalrayGlobals.imageBasedLighting"`;
	if (size($oldNode))
		delete $oldNode[0];

	connectAttr
		($iblNode + ".message") "mentalrayGlobals.imageBasedLighting";

	setAttr ($iblNode + ".primaryVisibility")    1;
	setAttr ($iblNode + ".visibleInReflections") 1;
	setAttr ($iblNode + ".visibleInRefractions") 1;
	setAttr ($iblNode + ".visibleInEnvironment") 1;
	setAttr ($iblNode + ".visibleInFinalGather") 1;

	// scale up to 10 times the scene BB
        // get all the dag objects
	string $geometries[] = `ls -type nurbsSurface -type mesh -type subdiv`;

	// exclude itself
	string $objs[];
	int $count=0;
	for($geo in $geometries) {
		if ($geo != $iblNode) {
			$objs[$count] = $geo;
			$count++;
			}
		}

	if ($count > 0) {
		float $bbox[] = `exactWorldBoundingBox $objs`;
		float $newSize = 0 ;
		for($bb in $bbox)
			$newSize = max($newSize, abs($bb));

		if ($newSize > 0) {
			// ibl shape itself has size
			float $iblBB[] = `exactWorldBoundingBox $iblNode`;
			float $iblSize = $iblBB[3];

			$newSize = $newSize * 10 / $iblSize ;
			string $transformNode[] =
				`listRelatives  -parent $iblNode`;

			setAttr ($transformNode[0] + ".scaleX") $newSize;
			setAttr ($transformNode[0] + ".scaleY") $newSize;
			setAttr ($transformNode[0] + ".scaleZ") $newSize;
			}
		}
	}

	miPropagateIbl();
}

global proc miPropagateIbl()
{
	string $iblNode[] =
		`listConnections "mentalrayGlobals.imageBasedLighting"`;

	if (size($iblNode))
		showEditor $iblNode[0];
}

global proc miUpdateIbl()
{
	if (!size(`ls mentalrayGlobals`))
		return;

	int $ibl = `connectionInfo -id "mentalrayGlobals.imageBasedLighting"`;
	if ($ibl)
		button -e -label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabDelete"))
			-command miDeleteIbl
			miCreateIblButton;
	else
		button -e
			-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabCreate"))
			-command miCreateIbl
			miCreateIblButton;
	control -e -en $ibl miOpenIblButton;
}

global proc miDeleteIbl()
{
	string $ibl[] = `listConnections "mentalrayGlobals.imageBasedLighting"`;
	if (size($ibl))
		delete $ibl[0];
}

global proc miCreateSunSky()
{
	// Don't forget to turn on FG 'cause this won't work
	// without out it...
	setAttr "miDefaultOptions.finalGather" 1;

	// create exposure control, to be used as a lens shader
	string $exposureControl = `shadingNode -asUtility mia_exposure_simple`;
	// Set some defaults for the exposure control
	setAttr ($exposureControl + ".pedestal") 0.0;
	setAttr ($exposureControl + ".gain") 0.2;
	setAttr ($exposureControl + ".knee") 0.75;
	setAttr ($exposureControl + ".compression") 3.0;
	setAttr ($exposureControl + ".gamma") 2.2;

	// create a unique named directional light
	string $lightInst = `createNode -name sunDirection transform`;
	string $lightShape=
	`shadingNode -name sunShape -p $lightInst -asLight directionalLight`;
	// set a reasonable default value
	// otherwise the sun is hidden under the ground :(
	setAttr ($lightInst + ".rotateX") -75.0;
	string $light[]   = `listRelatives $lightInst`;
	// custom light, no Maya shaders please.
	setAttr ($light[0] + ".miExportMrLight") 1;
	// create "physical sun", connect as light/emitter shader.
	string $sunShader = `shadingNode -asUtility mia_physicalsun`;
	connectAttr ($sunShader + ".message") ($light[0] + ".miLightShader");
	connectAttr ($sunShader + ".message") ($light[0] + ".miPhotonEmitter");
	// create "physical sky", to be used as environment shader.
	string $skyShader = `shadingNode -asUtility mia_physicalsky`;
	// mia_physicalsky wants to know where the sun is...
	connectAttr ($lightInst + ".message") ($skyShader + ".sun");
	// the Y axis is up by default in Maya.
	setAttr ($skyShader + ".y_is_up") 1;
	// To make searching easier, add a connection to the exposure control
	addAttr -shortName "miSkyExposure" -longName "miSkyExposure"
		-hidden true -at "message" $skyShader;
	connectAttr
		($exposureControl + ".message")
		($skyShader + ".miSkyExposure");

	// create input-to-input connections from sky to sun to enforce
	// consistency between the two shaders. common attributes can only
	// be set on the sky environment shader.
	connectAttr
		($skyShader + ".on")
		($sunShader + ".on");
	connectAttr
		($skyShader + ".multiplier")
		($sunShader + ".multiplier");
	connectAttr
		($skyShader + ".rgb_unit_conversion")
		($sunShader + ".rgb_unit_conversion");
	connectAttr
		($skyShader + ".haze")
		($sunShader + ".haze");
	connectAttr
		($skyShader + ".redblueshift")
		($sunShader + ".redblueshift");
	connectAttr
		($skyShader + ".saturation")
		($sunShader + ".saturation");
	connectAttr
		($skyShader + ".horizon_height")
		($sunShader + ".horizon_height");
	connectAttr
		($skyShader + ".y_is_up")
		($sunShader + ".y_is_up");

	// hookup sky as environment shader to all render cameras
	string $cameras[] = `ls -type camera`;
	for ($camera in $cameras) {
		if (!`getAttr ($camera + ".orthographic")`) {
			connectAttr -force
				($exposureControl + ".message")
				($camera + ".miLensShader");
			connectAttr -force
				($skyShader + ".message")
				($camera + ".miEnvironmentShader");
			}
		}

	// connect sky shader to dynamic attr on mentalrayGlobals
	connectAttr -force
		($skyShader + ".message")
		"mentalrayGlobals.sunAndSkyShader";

	miPropagateSunSky();
}

global proc miPropagateSunSky()
{
	if (`attributeQuery -exists -node mentalrayGlobals sunAndSkyShader`) {
		string $skyNode[] =
			`listConnections "mentalrayGlobals.sunAndSkyShader"`;
		if (size($skyNode))
			showEditor $skyNode[0];
		}
}

global proc miUpdateSunSky()
{
	if (size(`ls mentalrayGlobals`) == 0) return;
	int $sun = `connectionInfo -id mentalrayGlobals.sunAndSkyShader`;
	if ($sun)
		button -e -label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabDelete"))
			-command miDeleteSunSky
			miCreateSunSkyButton;
	else
		button -e
			-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabCreate"))
			-command miCreateSunSky
			miCreateSunSkyButton;
	control -e -en $sun miOpenSunSkyButton;
}

global proc miDeleteSunSky()
{
	if (`attributeQuery -exists -node mentalrayGlobals sunAndSkyShader`) {
		string $nodes[] =
			`listConnections "mentalrayGlobals.sunAndSkyShader"`;
		if (size($nodes)) {
			string $sky = $nodes[0];
			clear($nodes);
			$nodes = `listConnections ($sky + ".sun")`;
			if (size($nodes)) {
				string $sun = $nodes[0];
				clear($nodes);
				$nodes = `listConnections ($sun + ".miLightShader")`;
				if (size($nodes)) {
					string $sunShader = $nodes[0];
					delete -s true $sunShader;
					}
				else
					miWarn(getPluginResource("Mayatomr", "kNoSunShaderFound"));

				delete -s true $sun;
				}
			else
				miWarn(getPluginResource("Mayatomr", "kNoSunFound"));

			clear($nodes);
			$nodes = `listConnections ($sky + ".miSkyExposure")`;
			if (size($nodes)) {
				string $exposureControl = $nodes[0];
				delete -s true $exposureControl;
				}
			else
				miWarn(getPluginResource("Mayatomr", "kNoExposureFound"));

			delete $sky;
			}
		else
			miWarn(getPluginResource("Mayatomr", "kNoSunSkyFound"));
		}
}

global proc miSetAOStateValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptAOStateIndex;

	string $resValue = $StringOptionDefaults[$gMiStringOptAOStateIndex];

	if(`checkBoxGrp -query -exists miAOCtrl`)
	{
		int $value = `checkBoxGrp -query -value1 miAOCtrl`;
		if ( $value == 1 )
			$resValue = "true";
		else
			$resValue = "false";
	}
	miSetStringOptionValue($gMiStringOptAOStateIndex,$resValue);
}

global proc miSetAORaysValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptAORaysIndex ;

	int $value = $StringOptionDefaults[$gMiStringOptAORaysIndex];
	if(`intField -query -exists miAORaysCtrl`)
	{
		$value = `intField -query -value miAORaysCtrl`;
	}
	miSetStringOptionValue($gMiStringOptAORaysIndex,$value);
}

global proc miSetAOCacheValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptAOCacheIndex;

	string $resValue = $StringOptionDefaults[$gMiStringOptAOCacheIndex];

	if(`checkBoxGrp -query -exists miAOCacheCtrl`)
	{
		int $value = `checkBoxGrp -query -value1 miAOCacheCtrl`;
		if ( $value == 1 )
			$resValue = "true";
		else
			$resValue = "false";
	}
	miSetStringOptionValue($gMiStringOptAOCacheIndex,$resValue);
}

global proc miSetAOCacheDensityValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptAODensityIndex;

	float $value = $StringOptionDefaults[$gMiStringOptAODensityIndex];

	if(`floatField -query -exists miAOCacheDensityCtrl`)
	{
		$value = `floatField -query -value miAOCacheDensityCtrl`;
	}
	miSetStringOptionValue($gMiStringOptAODensityIndex,$value);
}

global proc miSetAOCachePointsValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptAOCachePointsIndex;

	int $value = $StringOptionDefaults[$gMiStringOptAOCachePointsIndex];

	if(`intField -query -exists miAOCachePointsCtrl`)
	{
		$value = `intField -query -value miAOCachePointsCtrl`;
	}
	miSetStringOptionValue($gMiStringOptAOCachePointsIndex,$value);
}

global proc miSetImportonStateValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptImpStateIndex;

	string $resValue = $StringOptionDefaults[$gMiStringOptImpStateIndex];

	if(`checkBoxGrp -query -exists miImportons`)
	{
		int $value = `checkBoxGrp -query -value1 miImportons`;
		if ( $value == 1 )
			$resValue = "true";
		else
			$resValue = "false";
	}
	miSetStringOptionValue($gMiStringOptImpStateIndex,$resValue);
}

global proc miSetImportonDensityValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptImpDensityIndex;


	float $value = $StringOptionDefaults[$gMiStringOptImpDensityIndex];
	if(`floatSliderGrp -query -exists miImportonsDensityCtrl`)
	{
		$value = `floatSliderGrp -query -value miImportonsDensityCtrl`;
	}
	miSetStringOptionValue($gMiStringOptImpDensityIndex,$value);
}

global proc miSetImportonMergeValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptImpMergeIndex;

	float $value = $StringOptionDefaults[$gMiStringOptImpMergeIndex];

	if(`floatField -query -exists miImportonsMergeCtrl`)
	{
		$value = `floatField -query -value miImportonsMergeCtrl`;
	}
	miSetStringOptionValue($gMiStringOptImpMergeIndex,$value);
}

global proc miSetImportonTraceDepthValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptImpTraceDepthIndex;


	int $value = $StringOptionDefaults[$gMiStringOptImpTraceDepthIndex];

	if(`intField -query -exists miImportonsDepthCtrl`)
	{
		$value = `intField -query -value miImportonsDepthCtrl`;
	}
	miSetStringOptionValue($gMiStringOptImpTraceDepthIndex,$value);
}

global proc miSetImportonTraverseValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptImpTraverseIndex;

	string $resValue = $StringOptionDefaults[$gMiStringOptImpTraverseIndex];

	if(`checkBoxGrp -query -exists miImportonsTraverseCtrl`)
	{
		int $value = `checkBoxGrp -query -value1 miImportonsTraverseCtrl`;
		if ( $value == 1 )
			$resValue = "true";
		else
			$resValue = "false";
	}
	miSetStringOptionValue($gMiStringOptImpTraverseIndex,$resValue);
}

global proc miSetIPStateValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptIPStateIndex;

	string $resValue = $StringOptionDefaults[$gMiStringOptIPStateIndex];

	if(`checkBoxGrp -query -exists miIPCtrl`)
	{
		int $value = `checkBoxGrp -query -value1 miIPCtrl`;
		if ( $value == 1 )
			$resValue = "true";
		else
			$resValue = "false";
	}
	miSetStringOptionValue($gMiStringOptIPStateIndex,$resValue);
}

global proc miSetIPRaysValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptIPRaysIndex ;

	int $value = $StringOptionDefaults[$gMiStringOptIPRaysIndex];
	if(`intField -query -exists miIPRaysCtrl`)
	{
		$value = `intField -query -value miIPRaysCtrl`;
	}
	miSetStringOptionValue($gMiStringOptIPRaysIndex,$value);
}

global proc miSetIPIndirectPassesValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptIPIndirectPassesIndex;

	int $value = $StringOptionDefaults[$gMiStringOptIPIndirectPassesIndex];
	if(`intField -query -exists miIPIndirectPassesCtrl`)
	{
		$value = `intField -query -value miIPIndirectPassesCtrl`;
	}
	miSetStringOptionValue($gMiStringOptIPIndirectPassesIndex,$value);
}

global proc miSetIPScaleValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptIPScaleIndex;

	float $value = $StringOptionDefaults[$gMiStringOptIPScaleIndex];

	if(`floatSliderGrp -query -exists miIPScaleCtrl`)
	{
		$value = `floatSliderGrp -query -value miIPScaleCtrl`;
	}
	miSetStringOptionValue($gMiStringOptIPScaleIndex,$value);
}

global proc miSetIPInterpolateValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptIPInterpolateIndex;

	string $resValue = $StringOptionDefaults[$gMiStringOptIPInterpolateIndex];
	if(`optionMenuGrp -query -exists miIPInterpolateCtrl`)
	{
		//using -select in order to get an int not handling string because of possible localization issue.
		int $value = `optionMenuGrp -query -select miIPInterpolateCtrl`;
		switch( $value )
		{
			case 1:
				$resValue = "0"; break;
			default:
			case 2:
				$resValue = "1"; break;
			case 3:
				$resValue = "2"; break;
		}
	}
	miSetStringOptionValue($gMiStringOptIPInterpolateIndex,$resValue);
}

global proc miSetIPInterpointsValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptIPInterpointsIndex;

	int $value = $StringOptionDefaults[$gMiStringOptIPInterpointsIndex];
	if(`intField -query -exists miIPInterpointsCtrl`)
	{
		$value = `intField -query -value miIPInterpointsCtrl`;
	}
	miSetStringOptionValue($gMiStringOptIPInterpointsIndex,$value);
}

global proc miSetIPEnvironmentValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptIPEnvIndex;

	string $resValue = $StringOptionDefaults[$gMiStringOptIPEnvIndex];

	if(`checkBoxGrp -query -exists miIPEnvironmentCtrl`)
	{
		int $value = `checkBoxGrp -query -value1 miIPEnvironmentCtrl`;
		if ( $value == 1 )
			$resValue = "true";
		else
			$resValue = "false";
	}
	miSetStringOptionValue($gMiStringOptIPEnvIndex,$resValue);
}

global proc miSetIPEnvRaysValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptIPEnvRaysIndex;

	int $value = $StringOptionDefaults[$gMiStringOptIPEnvRaysIndex];
	if(`intField -query -exists miIPEnvRaysCtrl`)
	{
		$value = `intField -query -value miIPEnvRaysCtrl`;
	}
	miSetStringOptionValue($gMiStringOptIPEnvRaysIndex,$value);
}

global proc miSetIPEnvScaleValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptIPEnvScaleIndex;

	int $value = $StringOptionDefaults[$gMiStringOptIPEnvScaleIndex];
	if(`intField -query -exists miIPEnvScaleCtrl`)
	{
		$value = `intField -query -value miIPEnvScaleCtrl`;
	}
	miSetStringOptionValue($gMiStringOptIPEnvScaleIndex,$value);
}

global proc miSetIPRebuildValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptIPRebuildIndex;

	string $resValue = $StringOptionDefaults[$gMiStringOptIPRebuildIndex];

	if(`checkBoxGrp -query -exists miIPRebuildCtrl`)
	{
		int $value = `checkBoxGrp -query -value1 miIPRebuildCtrl`;
		if ( $value == 1 )
			$resValue = "true";
		else
			$resValue = "false";
	}
	miSetStringOptionValue($gMiStringOptIPRebuildIndex,$resValue);
}

global proc miSetIPMapFileValue()
{
	global string $StringOptionDefaults[];
	global int $gMiStringOptIPMapFileIndex;

	string $resValue = $StringOptionDefaults[$gMiStringOptIPMapFileIndex];

	if(`textField -query -exists miMapFile`)
		$resValue = `textField -query -text miMapFile`;

	miSetStringOptionValue($gMiStringOptIPMapFileIndex,$resValue);
}

global proc miSetFGNormalToleranceValue()
{
    global string $StringOptionDefaults[];
    global int $gMiStringOptFGNormalToleranceIndex;

	float $value = $StringOptionDefaults[$gMiStringOptFGNormalToleranceIndex];

	if(`floatField -query -exists miFinalGatherNormalTolCtrl`)
	{
		$value = `floatField -query -value miFinalGatherNormalTolCtrl`;
	}
	miSetStringOptionValue($gMiStringOptFGNormalToleranceIndex, $value);
}

proc miSetIPRebuildUIValue()
{
	global int $gMiStringOptIPRebuildIndex;
	int $stateValue = miGetBoolStringOptionValue($gMiStringOptIPRebuildIndex);
	checkBoxGrp -edit -value1 $stateValue miIPRebuildCtrl;
}

proc miSetIPMapFileUIValue()
{
	global int $gMiStringOptIPMapFileIndex;
	string $resValue = miGetStringOptionValue($gMiStringOptIPMapFileIndex);
	textField -edit -text $resValue miMapFile;
}

proc miSetIPStateUIValue()
{
	global int $gMiStringOptIPStateIndex;
	int $stateValue = miGetBoolStringOptionValue($gMiStringOptIPStateIndex);
	checkBoxGrp -edit -value1 $stateValue miIPCtrl;
}

proc miSetIPRaysUIValue()
{
	global int $gMiStringOptIPRaysIndex;

	int $ipRaysValue = miGetStringOptionValue($gMiStringOptIPRaysIndex);
	intField -edit -value $ipRaysValue miIPRaysCtrl;
}

proc miSetIPIndirectPassesUIValue()
{
	global int $gMiStringOptIPIndirectPassesIndex;

	int $value = miGetStringOptionValue($gMiStringOptIPIndirectPassesIndex);
	intField -edit -value $value miIPIndirectPassesCtrl;
}

proc miSetIPScaleUIValue()
{
	global int $gMiStringOptIPScaleIndex;

	float $value = miGetStringOptionValue($gMiStringOptIPScaleIndex);
	floatSliderGrp -edit -value $value miIPScaleCtrl;
}

proc miSetIPInterpolateUIValue()
{
	global int $gMiStringOptIPInterpolateIndex;

	int $value = miGetStringOptionValue($gMiStringOptIPInterpolateIndex);
	if ($value < 0)
		$value = 0;
		else if ($value > 2)
			$value = 2;
	optionMenuGrp -edit -select ($value+1) miIPInterpolateCtrl;
}

proc miSetIPInterpointsUIValue()
{
	global int $gMiStringOptIPInterpointsIndex;

	int $value = miGetStringOptionValue($gMiStringOptIPInterpointsIndex);
	intField -edit -value $value miIPInterpointsCtrl;
}

proc miSetIPEnvironmentUIValue()
{
	global int $gMiStringOptIPEnvIndex;
	int $stateValue = miGetBoolStringOptionValue($gMiStringOptIPEnvIndex);
	checkBoxGrp -edit -value1 $stateValue miIPEnvironmentCtrl;
}

proc miSetIPEnvRaysUIValue()
{
	global int $gMiStringOptIPEnvRaysIndex;

	int $value = miGetStringOptionValue($gMiStringOptIPEnvRaysIndex);
	intField -edit -value $value miIPEnvRaysCtrl;
}

proc miSetIPEnvScaleUIValue()
{
	global int $gMiStringOptIPEnvScaleIndex;

	int $value = miGetStringOptionValue($gMiStringOptIPEnvScaleIndex);
	intField -edit -value $value miIPEnvScaleCtrl;
}

global proc miSetIPUIValues()
{
	miSetIPStateUIValue();
	miSetIPRaysUIValue();
	miSetIPIndirectPassesUIValue();
	miSetIPScaleUIValue();
	miSetIPInterpolateUIValue();
	miSetIPInterpointsUIValue();
	miSetIPEnvironmentUIValue();
	miSetIPEnvRaysUIValue();
	miSetIPEnvScaleUIValue();
	miSetIPRebuildUIValue();
}

proc miSetAOStateUIValue()
{
	global int $gMiStringOptAOStateIndex;
	int $stateValue = miGetBoolStringOptionValue($gMiStringOptAOStateIndex);
	checkBoxGrp -edit -value1 $stateValue miAOCtrl;
}

proc miSetAORaysUIValue()
{
	global int $gMiStringOptAORaysIndex;
	int $aoRaysValue = miGetStringOptionValue($gMiStringOptAORaysIndex);
	intField -edit -value $aoRaysValue miAORaysCtrl;
}

proc miSetAOCacheUIValue()
{
	global int $gMiStringOptAOCacheIndex;
	int $stateValue = miGetBoolStringOptionValue($gMiStringOptAOCacheIndex);
	checkBoxGrp -edit -value1 $stateValue miAOCacheCtrl;
}

proc miSetAOCacheDensityUIValue()
{
	global int $gMiStringOptAODensityIndex;
	float $aoDensityValue = miGetStringOptionValue($gMiStringOptAODensityIndex);
	floatField -edit -value $aoDensityValue miAOCacheDensityCtrl;
}

proc miSetAOCachePointsUIValue()
{
	global int $gMiStringOptAOCachePointsIndex;
	int $aoCachePointsValue = miGetStringOptionValue($gMiStringOptAOCachePointsIndex);
	intField -edit -value $aoCachePointsValue miAOCachePointsCtrl;
}

global proc miSetAOUIValues()
{
	miSetAOStateUIValue();
	miSetAORaysUIValue();
	miSetAOCacheUIValue();
	miSetAOCacheDensityUIValue();
	miSetAOCachePointsUIValue();
}
proc miSetImportonStateUIValue()
{
	global int $gMiStringOptImpStateIndex;
	int $stateValue = miGetBoolStringOptionValue($gMiStringOptImpStateIndex);
	checkBoxGrp -edit -value1 $stateValue miImportons;
}

proc miSetImportonDensityUIValue()
{
	global int $gMiStringOptImpDensityIndex;
	float $densityValue = miGetStringOptionValue($gMiStringOptImpDensityIndex);
	floatSliderGrp -edit -value $densityValue miImportonsDensityCtrl;
}

proc miSetImportonMergeUIValue()
{
	global int $gMiStringOptImpMergeIndex;
	float $mergeValue = miGetStringOptionValue($gMiStringOptImpMergeIndex);
	floatField -edit -value $mergeValue miImportonsMergeCtrl;
}

proc miSetImportonTraceDepthUIValue()
{
	global int $gMiStringOptImpTraceDepthIndex;
	int $traceDepthValue = miGetStringOptionValue($gMiStringOptImpTraceDepthIndex);
	intField -edit -value $traceDepthValue miImportonsDepthCtrl;
}

proc miSetImportonTraverseUIValue()
{
	global int $gMiStringOptImpTraverseIndex;
	int $traverseValue = miGetBoolStringOptionValue($gMiStringOptImpTraverseIndex);
	checkBoxGrp -edit -value1 $traverseValue miImportonsTraverseCtrl;
}

global proc miSetImportonsUIValues()
{
	miSetImportonStateUIValue();
	miSetImportonDensityUIValue();
	miSetImportonMergeUIValue();
	miSetImportonTraceDepthUIValue();
	miSetImportonTraverseUIValue();
}

global proc miSetFGNormalToleranceUIValue()
{
    global int $gMiStringOptFGNormalToleranceIndex;
    float $tolValue = miGetStringOptionValue($gMiStringOptFGNormalToleranceIndex);
    floatField -edit -value $tolValue miFinalGatherNormalTolCtrl;
}

// Description: This procedure is called to create the
//		Global Illumination frame.
//
global proc miCreateGlobalIlluminationFrame(string $parent)
{
	setParentToMentalTab("IndirectLighting");
	setParent $parent;

	string $fullPath = `setParent -q` + "|miGlobalIlluminationLayout";
	if (`columnLayout -exists  $fullPath`)
		return;

	setUITemplate -pushTemplate attributeEditorTemplate;
	columnLayout -adjustableColumn true miGlobalIlluminationLayout;

global	string	$miPresetsGlobillum[];

	miPresetMenu("Globillum", $miPresetsGlobillum);

	attrControlGrp -attribute "miDefaultOptions.globalIllum"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabGlobIllum"))
		-cc ("mentalRayOptionsCheckGlobalIllum;")
			miGlobalIllumCtrl;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kGlobalIlluminationAnnot"))
			miGlobalIllumCtrl;

	columnLayout -adj true miGlobalIllumGroup;

	attrControlGrp -attribute "miDefaultOptions.globalIllumAccuracy"
		-label (getPluginResource("Mayatomr", "kAccuracy"))
			miGlobalIllumAccuracy;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kGIAccuracyAnnot"))
			miGlobalIllumAccuracy;

	attrControlGrp -attribute "miDefaultOptions.globalIllumScale"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabScale"))
		-hideMapButton true
			miGlobalIllumScale;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kGIScaleAnnot"))
			miGlobalIllumScale;

	setParent ..; // miGlobalIllumGroup

	columnLayout -adj true miGlobalIllumOptionsGroup;

	attrControlGrp -attribute "miDefaultOptions.globalIllumRadius"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabRad"));

	attrControlGrp -attribute "miDefaultOptions.globalIllumMerge"
	-label (getPluginResource("Mayatomr", "kGIMerge"))
		miglobalIllumMerge;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kGIMergeAnnot"))
		miglobalIllumMerge;

	setParent ..; // miGlobalIllumOptionsGroup

	setParent ..;
	setUITemplate -popTemplate;
}

// Description: This procedure is called to create the
//		Caustics frame.
//
global proc miCreateCausticsFrame(string $parent)
{
	setParentToMentalTab("IndirectLighting");
	setParent $parent;

	string $fullPath = `setParent -q` + "|miCausticsLayout";
	if (`columnLayout -exists  $fullPath`)
		return;

	setUITemplate -pushTemplate attributeEditorTemplate;
	columnLayout -adjustableColumn true miGlobalIlluminationLayout;

global	string	$miPresetsCaustics[];
global	string	$miHintsCaustics[];

	miPresetMenu("Caustics", $miPresetsCaustics);

	attrControlGrp -attribute "miDefaultOptions.caustics"
		-cc ("mentalRayOptionsCheckCaustics;")
			miCausticsCtrl;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kEnableCausticsPhotonTracing"))
			miCausticsCtrl;

	columnLayout -adj true miCausticsGroup;

	attrControlGrp -attribute "miDefaultOptions.causticAccuracy"
		-label (getPluginResource("Mayatomr", "kAccuracy"))
			miCausticsAccuracy;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kAccuracyAnnot"))
			miCausticsAccuracy;

	attrControlGrp -attribute "miDefaultOptions.causticScale"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabScale"))
		-hideMapButton true
			miCausticsScale;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kScaleAnnot"))
			miCausticsScale;

	setParent ..; // miCausticsGroup

	columnLayout -adj true miCausticsOptionsGroup;
/*
 * New 'auto' radius UI button, to indicate render-time calculation.
 * Not yet enabled. steveR

	attrControlGrp -attribute "miDefaultOptions.causticAutoRadius"
		-label (getPluginResource("Mayatomr", "kAutoRadius"))
			miCausticsAutoRadius;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kAutoRadiusAnnot"))
			miCausticsAutoRadius;
*/
	attrControlGrp -attribute "miDefaultOptions.causticRadius"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabRad"))
			miCausticsRadius;

	attrControlGrp -attribute "miDefaultOptions.causticMerge"
	-label (getPluginResource("Mayatomr", "kCausticMerge"))
		miCausticMerge;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kCausticMergeAnnot"))
		miCausticMerge;

/*
 * Related to above 'auto' radius.
	scriptJob -p miCausticsRadius -rp
		-ac "miDefaultOptions.causticAutoRadius"
			"mentalRayOptionsCheckCausticRadius";
*/

	attrControlGrp -attribute "miDefaultOptions.causticFilterType";

	attrControlGrp -attribute "miDefaultOptions.causticFilterKernel";

	setParent ..; // miCausticsOptionsGroup

	setParent ..;
	setUITemplate -popTemplate;
}

// Description: This procedure is called to create the
//		Photon Tracing frame.
//
global proc miCreatePhotonTracingFrame(string $parent)
{
	setParentToMentalTab("IndirectLighting");
	setParent $parent;

	string $fullPath = `setParent -q` + "|miPhotonTracingLayout";
	if (`columnLayout -exists  $fullPath`)
		return;

	setUITemplate -pushTemplate attributeEditorTemplate;
	columnLayout -adjustableColumn true miPhotonTracingLayout;

	columnLayout -adj true miPhotonTracingGroup;

	attrControlGrp -attribute "miDefaultOptions.maxReflectionPhotons"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabPhotonReflect"))
			miPhotonReflectionDepth;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kPhotonReflectionsAnnot"))
			miPhotonReflectionDepth;

	attrControlGrp -attribute "miDefaultOptions.maxRefractionPhotons"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabPhotonRefrect"))
			miPhotonRefractionDepth;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kPhotonRefractionsAnnot"))
			miPhotonRefractionDepth;

	attrControlGrp -attribute "miDefaultOptions.maxPhotonDepth"
			miPhotonTraceDepth;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kMaxPhotonDepthAnnot"))
			miPhotonTraceDepth;

	setParent ..;	// miPhotonTracingGroup
	setParent ..;
	setUITemplate -popTemplate;
}

// Description: This procedure is called to create the
//		Photon Map frame.
//
global proc miCreatePhotonMapFrame(string $parent)
{
	setParentToMentalTab("IndirectLighting");
	setParent $parent;

	string $fullPath = `setParent -q` + "|miPhotonMapLayout";
	if (`columnLayout -exists  $fullPath`)
		return;

	setUITemplate -pushTemplate attributeEditorTemplate;
	columnLayout -adjustableColumn true miPhotonMapLayout;

global	string	$miPresetsPhotons[];
global	string	$miHintsPhotons[];

	miPresetMenu("Photons", $miPresetsPhotons);

	columnLayout -adj true miPhotonMapGroup;

	attrControlGrp -attribute "miDefaultOptions.photonMapRebuild"
		-label (getPluginResource("Mayatomr", "kRebuildPhotonMap"))
			miPhotonMapRebuild;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kRebuildPhotonMapAnnot"))
			miPhotonMapRebuild;

	attrControlGrp -attribute "miDefaultOptions.photonMapFilename"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabPhotonMapFile"))
			miPhotonMapFile;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kPhotonMapFileAnnot"))
			miPhotonMapFile;

	if (!`about -evalVersion`) {
		attrControlGrp -attribute "miDefaultOptions.photonMapVisualizer"
			-label (getPluginResource("Mayatomr", "kEnableMapVisualizer"))
			-cc ("MapVisualizerOptionChanged " +
			     "miDefaultOptions.photonMapVisualizer")
				miPhotonMapVisualizer;
		miControlGrpAnnotate
			(getPluginResource("Mayatomr", "kEnableMapVisualizerAnnot"))
				miPhotonMapVisualizer;
		}

	attrControlGrp -attribute "mentalrayGlobals.shadowEffectsWithPhotons"
		-label (getPluginResource("Mayatomr", "kDirectIlluminationShadowEffects"))
			miPhotonShadowEffects;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kDirectIlluminationShadowEffectsAnnot"))
			miPhotonShadowEffects;

	columnLayout miPhotonMapDiagPhotonGroup;

	// Diagnose Photon
	//
// #define I18N_TODO_API_ENUM
	attrControlGrp
		-label (getPluginResource("Mayatomr", "kDiagnosePhoton"))
		-attribute "miDefaultOptions.diagnosePhoton"
		-cc ("mentalRayOptionsCheckDiagPhoton;");

	attrControlGrp
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabPhotonDensity"))
		-attribute "miDefaultOptions.diagnosePhotonDensity"
	miPhotonMapDiagPhotonDensityCtrl;

	setParent ..; // miPhotonMapDiagPhotonGroup

	setParent ..;	//	miPhotonMapGroup
	setParent ..;
	setUITemplate -popTemplate;
}

// Description: This procedure is called to create the
//		Photon Volume frame.
//
global proc miCreatePhotonVolumeFrame(string $parent)
{
	setParentToMentalTab("IndirectLighting");
	setParent $parent;

	string $fullPath = `setParent -q` + "|miPhotonVolumeLayout";
	if (`columnLayout -exists  $fullPath`)
		return;

	setUITemplate -pushTemplate attributeEditorTemplate;
	columnLayout -adjustableColumn true miPhotonVolumeLayout;

	columnLayout -adj true miPhotonVolumeGroup;

	attrControlGrp -attribute "miDefaultOptions.photonAutoVolume"
			miPhotonAutoVolume;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kcreateMRIndirLightTabAutoPhotonVol"))
			miPhotonAutoVolume;

	attrControlGrp -attribute "miDefaultOptions.photonVolumeAccuracy"
		-label (getPluginResource("Mayatomr", "kAccuracy"))
			miPhotonVolumeAccuracy;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kPhotonVolumeAccuracyAnnot"))
			miPhotonVolumeAccuracy;

	attrControlGrp -attribute "miDefaultOptions.photonVolumeRadius"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabRad"));

	attrControlGrp -attribute "miDefaultOptions.photonVolumeMerge"
	-label (getPluginResource("Mayatomr", "kPhotonVolMerge"))
		miPhotonVolMerge;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kPhotonVolMergeAnnot"))
		miPhotonVolMerge;

	setParent ..;	// miPhotonVolumeGroup
	setParent ..;
	setUITemplate -popTemplate;
}

// Description: This procedure is called to create the
//		Importons frame.
//
global proc miCreateImportonsFrame(string $parent)
{
	setParentToMentalTab("IndirectLighting");
	global int $gAttributeEditorTemplateSingleWidgetWidth;
	setParent $parent;

	string $fullPath = `setParent -q` + "|miImportonsLayout";
	if (`columnLayout -exists  $fullPath`)
		return;

	setUITemplate -pushTemplate attributeEditorTemplate;
	columnLayout -adjustableColumn true miImportonsLayout;

	columnLayout -adj true miImportonsGroup;

	checkBoxGrp -numberOfCheckBoxes 1
		-label1 (getPluginResource("Mayatomr", "kImportons"))
		-cc ("miSetImportonStateValue; " +
		"mentalRayOptionsCheckImporton")
			miImportons;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kImportonsCBAnnot"))
			miImportons;

	columnLayout -adj true miImportonsOptionsGroup;

	floatSliderGrp
		-label (getPluginResource("Mayatomr", "kImportonsDensity"))
		-cc "miSetImportonDensityValue"
		-min 0.02
		-fmn 0.02
		-max 64.0
		-fmx 10000.0
			miImportonsDensityCtrl;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kImportonsDensityAnnot"))
			miImportonsDensityCtrl;

	rowLayout -numberOfColumns 2
		-columnWidth 2 $gAttributeEditorTemplateSingleWidgetWidth;
		text -label (getPluginResource("Mayatomr", "kImportonsMerge"));
		floatField
			-cc "miSetImportonMergeValue"
			-minValue 0.0
			-annotation (getPluginResource("Mayatomr", "kImportonsMergeAnnot"))
			miImportonsMergeCtrl;
	setParent ..;

	rowLayout -numberOfColumns 2
		-columnWidth 2 $gAttributeEditorTemplateSingleWidgetWidth;;
		text -label (getPluginResource("Mayatomr", "kImportonsDepth"));
		intField
			-cc "miSetImportonTraceDepthValue"
			-minValue 0
			-annotation	(getPluginResource("Mayatomr", "kImportonsDepthAnnot"))
			miImportonsDepthCtrl;
	setParent ..;

	checkBoxGrp -numberOfCheckBoxes 1
		-label1 (getPluginResource("Mayatomr", "kImportonsTraverse"))
		-cc "miSetImportonTraverseValue"
			miImportonsTraverseCtrl;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kImportonsTraverseAnnot"))
			miImportonsTraverseCtrl;

	scriptJob
		-replacePrevious
		-parent miImportonsGroup
		-allChildren
		-attributeChange ("miDefaultOptions.stringOptions")
		"miSetImportonsUIValues()";

	setParent ..;	// miImportonsGroup
	setParent ..;

	setParent ..;
	setUITemplate -popTemplate;
}

// Description:  This procedure is called to create the
//         Final Gather frame.
//
global proc miCreateFinalGatherFrame(string $parent)
{
	setParentToMentalTab("IndirectLighting");
    global int $gAttributeEditorTemplateSingleWidgetWidth;
	setParent $parent;

	string $fullPath = `setParent -q` + "|miFinalGatherLayout";
	if (`columnLayout -exists $fullPath`)
		return;

	setUITemplate -pushTemplate attributeEditorTemplate;

	columnLayout -adjustableColumn true miFinalGatherLayout;

global	string	$miPresetsFinalGather[];
global	string	$miHintsFinalGather[];
	//---------------------
	// Final Gathering
	//---------------------

	attrControlGrp -attribute "miDefaultOptions.finalGather"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabFinalGathering"))
		-cc ("mentalRayOptionsCheckFinalGather;")
			miFinalGatherCtrl;

	columnLayout -adj true miFinalGatherGroup;

	attrControlGrp -attribute "miDefaultOptions.finalGatherRays"
		-label (getPluginResource("Mayatomr", "kAccuracy"))
			miFinalGatherAccurracy;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kFinalGatherAccuracyAnnot"))
			miFinalGatherAccurracy;

	attrControlGrp -attribute "miDefaultOptions.finalGatherPresampleDensity"
		-label (getPluginResource("Mayatomr", "kPointDensity"))
			miFinalGatherDensity;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kPointDensityAnnot"))
			miFinalGatherDensity;

	attrControlGrp -attribute "miDefaultOptions.finalGatherPoints"
		-label (getPluginResource("Mayatomr", "kPointInterpolation"))
			miFinalGatherPoints;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kPointInterpolationAnnot"))
			miFinalGatherPoints;

	attrControlGrp -attribute "miDefaultOptions.finalGatherScale"
		-label (getPluginResource("Mayatomr", "kPrimaryDiffuseScale"))
		-hideMapButton true
			miFinalGatherScale;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kFGScaleAnnot"))
			miFinalGatherScale;

	attrControlGrp -attribute "miDefaultOptions.finalGatherBounceScale"
		-label (getPluginResource("Mayatomr", "kSecondaryBounceScale"))
		-hideMapButton true
			miFinalGatherBounceScale;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kSecondaryBounceScaleAnnot"))
			miFinalGatherBounceScale;

	attrControlGrp -attribute "miDefaultOptions.finalGatherTraceDiffuse"
		-label (getPluginResource("Mayatomr", "kSecondaryDiffuseBounces"))
			miFinalGatherDiffuseCtrl;

	setParent ..;

	//---------------------
	// Final Gathering Map
	//---------------------

	frameLayout -label (getPluginResource("Mayatomr", "kFGMap"))
		-cll true -cl true
		-annotation (getPluginResource("Mayatomr", "kFinalGatheringMapAnnot"))
			miFinalGatherMapFrame;

	columnLayout -adj true miFinalGatherMapGroup;

// #define I18N_TODO_API_ENUM
	attrControlGrp -attribute "miDefaultOptions.finalGatherRebuild"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabRebuild"));
//			miFinalGatherRebuild;
//	miControlGrpAnnotate
//		(getPluginResource("Mayatomr", "kRebuildAnnot"))
//			miFinalGatherRebuild;
// Maya Bug:
// The attrControlGrp command reports errors on enum attributes as soon as
// a name is specified:
// Error: line 1: Flags must come before objects: -enumeratedItem //

	attrControlGrp -attribute "miDefaultOptions.finalGatherFilename"
		-label (getPluginResource("Mayatomr", "kFGFile"))
			miFinalGatherFile;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kFGFileAnnot"))
			miFinalGatherFile;

	columnLayout -adj true miFGSecondaryfile;

	rowLayout -nc 2;
		text -label (getPluginResource("Mayatomr", "kFGSecondaryFile"));
		string $AddNewItem = getPluginResource("Mayatomr", "kcreateMRIndirLightTabAddNewItem");
		if(`layout -exists "miAEFGSecondaryfile"`)
			button -label $AddNewItem
				-command ("AEnewNonNumericMultiAddNewItem(\"miDefaultOptions\", \"finalGatherMergeFiles\");"
						+ "miReplaceNonNumericMulti(\"miFGSecondaryfile\", \"miAEFGSecondaryfile\", \"miDefaultOptions\", \"finalGatherMergeFiles\");"
						+ "miReplaceNonNumericMulti(\"miAEFGSecondaryfile\", \"miFGSecondaryfile\", \"miDefaultOptions\", \"finalGatherMergeFiles\");");
		else
			button -label $AddNewItem
				-command ("AEnewNonNumericMultiAddNewItem(\"miDefaultOptions\", \"finalGatherMergeFiles\");"
						+ "miReplaceNonNumericMulti(\"miFGSecondaryfile\", \"miAEFGSecondaryfile\", \"miDefaultOptions\", \"finalGatherMergeFiles\");");
	setParent ..;

	int $elementIndexString[] = miGetElementIndex("miDefaultOptions", "finalGatherMergeFiles");
	global int $gMaxNonNumericMultis;

	int		$numElements = size($elementIndexString);

	int $tooBig = 0;
	if ( $numElements > $gMaxNonNumericMultis ){
		$tooBig = $numElements - $gMaxNonNumericMultis;
		$numElements = $gMaxNonNumericMultis;
	}

	for ( $i = 0; $i < $numElements; $i++ ) {
		miNewNonNumericMultiCreateNewControl(
			"miFGSecondaryfile", "miAEFGSecondaryfile", "miDefaultOptions", "finalGatherMergeFiles", "\"\"", "AEnewString", $elementIndexString[$i]);
	}
	if ( $tooBig > 0 ){
		string $fmt = getPluginResource("Mayatomr", "kInsufficientRoom");
		text -l `format -s $tooBig $fmt`;
	}
	setParent ..;

	if (!`about -evalVersion`) {
		attrControlGrp
			-attribute "miDefaultOptions.finalGatherMapVisualizer"
			-label (getPluginResource("Mayatomr", "kEnableMapVisualizer"))
			-cc ("MapVisualizerOptionChanged " +
			     "miDefaultOptions.finalGatherMapVisualizer");
		}

	attrControlGrp -attribute "mentalrayGlobals.previewFinalGatherTiles"
			miFinalGatherPreview;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kPreviewFG"))
			miFinalGatherPreview;

	attrControlGrp -attribute "miDefaultOptions.finalGatherFast"
		 -label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabPreComputePhotonLookup"))
			miFinalGatherFast;

	attrControlGrp
		-label (getPluginResource("Mayatomr", "kDiagnoseFG"))
		-attribute "miDefaultOptions.diagnoseFinalg";

	separator -st none;

	setParent ..; // miFinalGatherMapGroup
	setParent ..;

	//---------------------
	// Final Gathering Quality
	//---------------------

	frameLayout -label (getPluginResource("Mayatomr", "kFGQuality"))
		-cll true -cl true
		-annotation (getPluginResource("Mayatomr", "kFinalGatherQualityAnnot"))
			miFinalGatherQualityFrame;

	columnLayout -adj true miFinalGatherQualityGroup;

	attrControlGrp -attribute "miDefaultOptions.finalGatherFilter"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabFilter"))
			miFinalGatherFilter;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kFilterAnnot"))
			miFinalGatherFilter;

	attrControlGrp -attribute "miDefaultOptions.finalGatherFalloffStart"
		-label (getPluginResource("Mayatomr", "kFalloffStart"))
			miFinalGatherFalloffStart;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kFalloffStartAnnot"))
			miFinalGatherFalloffStart;

	attrControlGrp -attribute "miDefaultOptions.finalGatherFalloffStop"
		-label (getPluginResource("Mayatomr", "kFalloffStop"))
			miFinalGatherFalloffStop;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kFalloffStopAnnot"))
			miFinalGatherFalloffStop;

    global int $gMiStringOptFGNormalToleranceIndex;
    float $tolValue = miGetStringOptionValue($gMiStringOptFGNormalToleranceIndex);
    rowLayout -numberOfColumns 2
		-columnWidth 2 $gAttributeEditorTemplateSingleWidgetWidth;
		text -label (getPluginResource("Mayatomr", "kFGNormalTolerance"));
		floatField
			-cc "miSetFGNormalToleranceValue"
            -pre 3
			-minValue 0.001
            -maxValue 89.999
            -value $tolValue
			-annotation	(getPluginResource("Mayatomr", "kFGNormalToleranceAnnot"))
			miFinalGatherNormalTolCtrl;

	setParent ..;

	scriptJob
		-replacePrevious
		-parent miFinalGatherNormalTolCtrl
		-allChildren
		-attributeChange ("miDefaultOptions.stringOptions")
		"miSetFGNormalToleranceUIValue()";

	setParent ..; //	miFinalGatherQualityGroup
	setParent ..;

	//---------------------
	// Final Gathering Tracing
	//---------------------

	frameLayout -label (getPluginResource("Mayatomr", "kFGTracing"))
		-cll true -cl true
		-annotation (getPluginResource("Mayatomr", "kFinalGatherTracingAnnot"))
			miFinalGatherTracingFrame;

	columnLayout -adj true miFinalGatherTracingGroup;

	attrControlGrp -attribute "miDefaultOptions.finalGatherTraceReflection"
		-label (getPluginResource("Mayatomr", "kReflections"))
			miFinalgReflectionDepth;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kFGReflectionsAnnot"))
			miFinalgReflectionDepth;

	attrControlGrp -attribute "miDefaultOptions.finalGatherTraceRefraction"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabRefraction"))
			miFinalRefractionDepth;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kFGRefractionsAnnot"))
			miFinalRefractionDepth;

	attrControlGrp -attribute "miDefaultOptions.finalGatherTraceDepth"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabMaxTraceDepth"))
			miFinalgTraceDepth;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kFGMaxTraceDepthAnnot"))
			miFinalgTraceDepth;

	optionMenuGrp -label (getPluginResource("Mayatomr", "kFGMode"))
        -cc "mentalRayOptionsUpdateFinalGatherMode"
            miFinalGatherModeCtrl;
            menuItem
                -label (getPluginResource("Mayatomr", "kAutomatic"))
                -ann (getPluginResource("Mayatomr", "kAutomaticAnnot"));
            menuItem
                -label (getPluginResource("Mayatomr", "kOptimizeForAnimations"))
                -ann (getPluginResource("Mayatomr", "kOptimizeForAnimationsAnnot"));
            menuItem
                -label (getPluginResource("Mayatomr", "kNoFGCaching"))
                -ann (getPluginResource("Mayatomr", "kNoFGCachingAnnot"));
            menuItem
                -label (getPluginResource("Mayatomr", "kRadiusQualityControl"))
                -ann (getPluginResource("Mayatomr", "kRadiusQualityControlAnnot"));
    miControlGrpAnnotate
        (getPluginResource("Mayatomr", "kFGModeAnnot"))
        miFinalGatherModeCtrl;

	scriptJob -p miFinalGatherModeCtrl -rp
		-ac "miDefaultOptions.finalGatherMode"
			("mentalRayOptionsCheckFinalGatherMode;");

	columnLayout -adj true miFinalGatherRadiusGroup;

	attrControlGrp -attribute "miDefaultOptions.finalGatherMaxRadius"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabMaxRad"))
			miFinalGatherMaxRadius;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kMaxRadiusAnnot"))
			miFinalGatherMaxRadius;

	attrControlGrp -attribute "miDefaultOptions.finalGatherMinRadius"
		-label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabMinRad"))
			miFinalGatherMinRadius;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kMinRadiusAnnot"))
			miFinalGatherMinRadius;

	attrControlGrp -attribute "miDefaultOptions.finalGatherView"
		-label (getPluginResource("Mayatomr", "kView"))
			miFinalGatherView;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kViewAnnot"))
			miFinalGatherView;

	setParent ..;	// miFinalGatherRadiusGroup

	mentalRayOptionsCheckFinalGatherMode;

	setParent ..;	//	miFinalGatherTracingGroup
	setParent ..;

	setParent ..;
	setUITemplate -popTemplate;
}

// Description:  This procedure is called to create the
//         Irradiance Particles frame.
//
global proc miCreateIrradianceParticlesFrame(string $parent)
{
	setParentToMentalTab("IndirectLighting");
	global int $gAttributeEditorTemplateSingleWidgetWidth;

	setParent $parent;

	string $fullPath = `setParent -q` + "|miIrradianceParticlesLayout";
	if (`columnLayout -exists $fullPath`)
		return;

	setUITemplate -pushTemplate attributeEditorTemplate;
	columnLayout -adjustableColumn true miIrradianceParticlesLayout;

	columnLayout -adj true miIPGroup;

	checkBoxGrp -numberOfCheckBoxes 1
		-label1 (getPluginResource("Mayatomr", "kIP"))
		-cc ("miSetIPStateValue;"
			+ "mentalRayOptionsCheckIP")
			miIPCtrl;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kIPAnnotation"))
			miIPCtrl;

	columnLayout -adj true miIPOptionsGroup;

	rowLayout -numberOfColumns 2
		-columnWidth 2 $gAttributeEditorTemplateSingleWidgetWidth;
		text -label (getPluginResource("Mayatomr", "kIPRays"));
		intField
			-cc "miSetIPRaysValue"
			-value 2
			-minValue 2
			-maxValue 512
			-annotation	(getPluginResource("Mayatomr", "kIPRaysAnnot"))
			miIPRaysCtrl;
	setParent ..;

	rowLayout -numberOfColumns 2
		-columnWidth 2 $gAttributeEditorTemplateSingleWidgetWidth;
		text -label (getPluginResource("Mayatomr", "kIPIndirectPasses"));
		intField
			-cc "miSetIPIndirectPassesValue"
			-minValue -1
			-maxValue 100000
			-step 1
			-annotation	(getPluginResource("Mayatomr", "kIPIndirectPassesAnnot"))
			miIPIndirectPassesCtrl;
	setParent ..;

	floatSliderGrp
		-label (getPluginResource("Mayatomr", "kIPScale"))
		-cc "miSetIPScaleValue"
		-min 0.0
		-fmn -10000000.0
		-max 1.0
		-fmx 10000000.0
			miIPScaleCtrl;

	optionMenuGrp -label (getPluginResource("Mayatomr", "kIPInterpolate"))
		-cc "miSetIPInterpolateValue"
			miIPInterpolateCtrl;
			menuItem -label (getPluginResource("Mayatomr", "kIPInterpolate0")) -ann
				(getPluginResource("Mayatomr", "kIPInterpolateNever"));
			menuItem -label (getPluginResource("Mayatomr", "kIPInterpolate1")) -ann
				(getPluginResource("Mayatomr", "kIPInterpolateAlways"));
			menuItem -label (getPluginResource("Mayatomr", "kIPInterpolate2")) -ann
				(getPluginResource("Mayatomr", "kIPInterpolateSecondary"));
	miControlGrpAnnotate (getPluginResource("Mayatomr", "kIPInterpolateAnnot"))
			miIPInterpolateCtrl;

	rowLayout -numberOfColumns 2
		-columnWidth 2 $gAttributeEditorTemplateSingleWidgetWidth;
		text -label (getPluginResource("Mayatomr", "kIPInterpoints"));
		intField
			-cc "miSetIPInterpointsValue"
			-minValue 0
			-annotation	(getPluginResource("Mayatomr", "kIPInterpointsAnnot"))
			miIPInterpointsCtrl;
	setParent ..;

	separator;

	checkBoxGrp -numberOfCheckBoxes 1
		-label1 (getPluginResource("Mayatomr", "kIPEnvironment"))
		-cc ("miSetIPEnvironmentValue;"
			+ "mentalRayOptionsCheckIP")
			miIPEnvironmentCtrl;

	columnLayout -adj true miIPEnvOptGroup;

	rowLayout -numberOfColumns 2
		-columnWidth 2 $gAttributeEditorTemplateSingleWidgetWidth;
		text -label (getPluginResource("Mayatomr", "kIPEnvRays"));
		intField
			-cc "miSetIPEnvRaysValue"
			-value 2
			-minValue 2
			miIPEnvRaysCtrl;
	setParent ..;

	rowLayout -numberOfColumns 2
		-columnWidth 2 $gAttributeEditorTemplateSingleWidgetWidth;
		text -label (getPluginResource("Mayatomr", "kIPEnvScale"));
		intField
			-cc "miSetIPEnvScaleValue"
			miIPEnvScaleCtrl;
	setParent ..;

	setParent ..; // miIPEnvOptGroup

	separator;

	checkBoxGrp -numberOfCheckBoxes 1
		-label1 (getPluginResource("Mayatomr", "kIPRebuild"))
		-annotation	(getPluginResource("Mayatomr", "kIPRebuildTooltip"))
		-cc "miSetIPRebuildValue"
			miIPRebuildCtrl;


	rowLayout -nc 2;
			text -label (getPluginResource("Mayatomr", "kIPMapFile"));
			textField
				-annotation (getPluginResource("Mayatomr", "kIPMapFileAnnot"))
				-cc "miSetIPMapFileValue"
				miMapFile;
		setParent ..;

	scriptJob
		-replacePrevious
		-parent miIPGroup
		-allChildren
		-attributeChange ("miDefaultOptions.stringOptions")
		"miSetIPUIValues()";


	setParent ..; // miIPOptionsGroup
	setParent ..; // miIPGroup
	setParent ..; // miIrradianceParticlesLayout
	setUITemplate -popTemplate;
}

// Description:  This procedure is called to create the
//         Ambient Occlusion frame.
//
global proc miCreateAmbientOcclusionFrame(string $parent)
{
	setParentToMentalTab("IndirectLighting");
	global int $gAttributeEditorTemplateSingleWidgetWidth;
	setParent $parent;

	string $fullPath = `setParent -q` + "|miAmbientOcclusionLayout";
	if (`columnLayout -exists $fullPath`)
		return;

	setUITemplate -pushTemplate attributeEditorTemplate;
	columnLayout -adjustableColumn true miAmbientOcclusionLayout;

	columnLayout -adj true miAmbientOcclusionGroup;

	checkBoxGrp -numberOfCheckBoxes 1
		-label1 (getPluginResource("Mayatomr", "kAO"))
		-cc ("miSetAOStateValue; " +
		"mentalRayOptionsCheckAO")
			miAOCtrl;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kAOCBAnnot"))
			miAOCtrl;

	columnLayout -adj true miAmbientOcclusionOptionsGroup;

	rowLayout -numberOfColumns 2
		-columnWidth 2 $gAttributeEditorTemplateSingleWidgetWidth;
		text -label (getPluginResource("Mayatomr", "kAORays"));
		intField
			-cc "miSetAORaysValue"
			-minValue 0
			-annotation	(getPluginResource("Mayatomr", "kAORaysAnnot"))
			miAORaysCtrl;
	setParent ..;

	checkBoxGrp -numberOfCheckBoxes 1
		-label1 (getPluginResource("Mayatomr", "kAOCache"))
		-cc ("miSetAOCacheValue; " + "mentalRayOptionsCheckAO")
			miAOCacheCtrl;
	miControlGrpAnnotate
		(getPluginResource("Mayatomr", "kAOCacheAnnot"))
			miAOCacheCtrl;
	columnLayout -adj true miAmbientOcclusionOptionsCacheGroup;

	rowLayout -numberOfColumns 2
		-columnWidth 2 $gAttributeEditorTemplateSingleWidgetWidth;
		text -label (getPluginResource("Mayatomr", "kAOCacheDensity"));
		floatField
			-cc "miSetAOCacheDensityValue"
			-minValue 0.0
			-annotation	(getPluginResource("Mayatomr", "kAOCacheDensityAnnot"))
			miAOCacheDensityCtrl;

	setParent ..;

	rowLayout -numberOfColumns 2
	-columnWidth 2 $gAttributeEditorTemplateSingleWidgetWidth;
		text -label (getPluginResource("Mayatomr", "kAOCachePoints"));
		intField
			-cc "miSetAOCachePointsValue"
			-minValue 0
			-annotation	(getPluginResource("Mayatomr", "kAOCachePointsAnnot"))
			miAOCachePointsCtrl;
	setParent ..;

	scriptJob
		-replacePrevious
		-parent miAmbientOcclusionGroup
		-allChildren
		-attributeChange ("miDefaultOptions.stringOptions")
		"miSetAOUIValues()";

	setParent ..;
	setParent ..;

	setParent ..; // miAmbientOcclusionOptionsGroup
	setParent ..; // miAmbientOcclusionGroup
	setUITemplate -popTemplate;
}

// Related to 'auto' radius UI, not yet enabled.
// steveR
/*
global proc mentalRayOptionsCheckCausticRadius()
{
	string $oldParent = `setParent -q`;

	if(setParentToMentalTab("IndirectLighting"))
	{
		int $isAuto = `getAttr "miDefaultOptions.causticAutoRadius"`;

		attrControlGrp -edit -enable (! $isAuto) miCausticsRadius;
	}

	setParent $oldParent;
}
*/

global proc mentalRayOptionsCheckCaustics()
{
	if (!size(`ls miDefaultOptions`))
		return;

	global int $gMiStringOptIPStateIndex;
	global int $gMiStringOptImpStateIndex;

	string $oldParent = `setParent -q`;
	int $rayTrace = `getAttr "miDefaultOptions.rayTracing"`;
	int $globIllum = `getAttr "miDefaultOptions.globalIllum"`;
	int $caustics = `getAttr "miDefaultOptions.caustics"`;
	int $IPCheckBox = miGetBoolStringOptionValue($gMiStringOptIPStateIndex);
	int $ImportonCheckBox = miGetBoolStringOptionValue($gMiStringOptImpStateIndex);
	int $impEnabled = ($caustics || $globIllum || $IPCheckBox);

	if(setParentToMentalTab("IndirectLighting"))
	{
		int $enableState = ($rayTrace && $caustics);

		layout -edit -enable $enableState miCausticsGroup;
		layout -edit -enable $enableState miCausticsOptionsGroup;

		if (! $impEnabled)
		{
			checkBoxGrp -edit -value1 false miImportons;
			miSetImportonStateValue();
		}
	}
	if(setParentToMentalTab("Features"))
	{
		if (! $impEnabled)
		{
			checkBoxGrp -edit -value1 false miImportonsFeatureCtrl;
			miSetImportonStateFeatureValue();
		}
	}
	mentalRayOptionsCheckImporton();

	mentalRayOptionsCheckPhotons();


	setParent $oldParent;
}

global proc mentalRayOptionsCheckGlobalIllum()
{

	if (!size(`ls miDefaultOptions`))
		return;

	global int $gMiStringOptIPStateIndex;
	global int $gMiStringOptImpStateIndex;

	string $oldParent = `setParent -q`;
	int $rayTrace = `getAttr "miDefaultOptions.rayTracing"`;
	int $globIllum = `getAttr "miDefaultOptions.globalIllum"`;
	int $caustics = `getAttr "miDefaultOptions.caustics"`;
	int $IPCheckBox = miGetBoolStringOptionValue($gMiStringOptIPStateIndex);
	int $ImportonCheckBox = miGetBoolStringOptionValue($gMiStringOptImpStateIndex);
	int $impEnabled = ($caustics || $globIllum || $IPCheckBox);

	if(setParentToMentalTab("IndirectLighting"))
	{
		int $finalGather = `getAttr "miDefaultOptions.finalGather"`;
		int $enableFGFast = ($finalGather && $globIllum);
		int $enableGI = ($rayTrace && $globIllum);

		layout -edit -enable $enableGI miGlobalIllumGroup;
		layout -edit -enable $enableGI miGlobalIllumOptionsGroup;
		control -edit -enable $enableFGFast miFinalGatherFast;
		if (! $impEnabled)
		{
			checkBoxGrp -edit -value1 false miImportons;
			miSetImportonStateValue();
		}
	}
	if(setParentToMentalTab("Features"))
	{
		if (! $impEnabled)
		{
			checkBoxGrp -edit -value1 false miImportonsFeatureCtrl;
			miSetImportonStateFeatureValue();
		}
	}

	mentalRayOptionsCheckImporton();

	mentalRayOptionsCheckPhotons();

	setParent $oldParent;
}

global proc mentalRayOptionsCheckImporton()
{
	if (!size(`ls miDefaultOptions`))
		return;

	global int $gMiStringOptIPStateIndex;
	global int $gMiStringOptImpStateIndex;

	string $oldParent = `setParent -q`;

	int $rayTrace = `getAttr "miDefaultOptions.rayTracing"`;
	int $globIllum= `getAttr "miDefaultOptions.globalIllum"`;
	int $caustics = `getAttr "miDefaultOptions.caustics"`;
	int $IPCheckBox = miGetBoolStringOptionValue($gMiStringOptIPStateIndex);
	int $ImportonCheckBox = miGetBoolStringOptionValue($gMiStringOptImpStateIndex);

	if(setParentToMentalTab("IndirectLighting"))
	{
		int $enableImp = ($rayTrace && ($globIllum || $caustics ));
		int $enableOptions = ($enableImp && $ImportonCheckBox);

		layout -edit -enable $enableImp miImportonsGroup;
		layout -edit -enable $enableOptions miImportonsOptionsGroup;

		if ($IPCheckBox)
		{
			layout -edit -enable $IPCheckBox miImportonsGroup;
			layout -edit -enable $IPCheckBox miImportonsOptionsGroup;
			checkBoxGrp -edit -enable (! $IPCheckBox) miImportons;
			checkBoxGrp -edit -label1 (getPluginResource("Mayatomr", "kImportonEnforced")) miImportons;
			checkBoxGrp -edit -enable (! $IPCheckBox) miImportonsTraverseCtrl;
		}
	}
	if(setParentToMentalTab("Features"))
	{
		int $enableImp = ($rayTrace && ($globIllum || $caustics ));

		// IP force Imp disable + label + checked on(logic done in checkIP).
		if ($IPCheckBox)
		{
			checkBoxGrp -edit -label1 (getPluginResource("Mayatomr", "kImportonEnforced")) miImportonsFeatureCtrl;
			checkBoxGrp -edit -enable (! $IPCheckBox) miImportonsFeatureCtrl;
		}
		else
		{
			checkBoxGrp -edit -enable $enableImp miImportonsFeatureCtrl;
			checkBoxGrp -edit -label1 (getPluginResource("Mayatomr", "kImportons")) miImportonsFeatureCtrl;
		}
	}

	setParent $oldParent;
}

global proc mentalRayOptionsCheckIP()
{
	if (!size(`ls miDefaultOptions`))
		return;
	global int $gMiStringOptIPStateIndex;
	global int $gMiStringOptImpStateIndex;


	string $oldParent = `setParent -q`;
	int $rayTrace = `getAttr "miDefaultOptions.rayTracing"`;
	int $finalGather = `getAttr "miDefaultOptions.finalGather"`;
	int $enableFinalGather = ($rayTrace && $finalGather);

	int $globIllum = `getAttr "miDefaultOptions.globalIllum"`;
	int $caustics = `getAttr "miDefaultOptions.caustics"`;
	int $impEnabled = ($caustics || $globIllum);
	int $IPCheckBox = miGetBoolStringOptionValue($gMiStringOptIPStateIndex);
	int $ImportonCheckBox = miGetBoolStringOptionValue($gMiStringOptImpStateIndex);
	int $enableImp = ($rayTrace && ($globIllum || $caustics ));
	int $enableOptions = ($enableImp && $ImportonCheckBox);
	if(setParentToMentalTab("IndirectLighting"))
	{
		int $IPEnvCheckBox = `checkBoxGrp -q -v1 "miIPEnvironmentCtrl"`;
		int $enableOptions = ($IPCheckBox && $rayTrace);
		int $enableEnvOptions = ($enableOptions && $IPEnvCheckBox);

		layout -edit -enable $enableOptions miIPOptionsGroup;
		layout -edit -enable $enableEnvOptions miIPEnvOptGroup;
		if (! $IPCheckBox)
		{
			checkBoxGrp -edit -label1 (getPluginResource("Mayatomr", "kImportons")) miImportons;
			checkBoxGrp -edit -label1 (getPluginResource("Mayatomr", "kImportonsTraverse")) miImportonsTraverseCtrl;
			checkBoxGrp -edit -enable (! $IPCheckBox) miImportons;
			layout -edit -enable $enableImp miImportonsGroup;
			layout -edit -enable $enableOptions miImportonsOptionsGroup;
			checkBoxGrp -edit -enable (! $IPCheckBox) miImportonsTraverseCtrl;
            miSetImportonStateValue();

            if ($impEnabled && $ImportonCheckBox)
			{
				checkBoxGrp -edit -value1 true miImportons;
				miSetImportonStateValue();
			}

			if (! $impEnabled)
			{
				checkBoxGrp -edit -value1 false miImportons;
				miSetImportonStateValue();
			}
		}
		else
		{
			// IP On, FG Off : Importons label(enforced), Importons checkbox value, ImportonsTraverse value.
			checkBoxGrp -edit -label1 (getPluginResource("Mayatomr", "kImportonEnforced")) miImportons;
			checkBoxGrp -edit -label1 (getPluginResource("Mayatomr", "kImportonTraverseEnforced")) miImportonsTraverseCtrl;
			checkBoxGrp -edit -value1 true miImportons;
			miSetImportonStateValue();
			checkBoxGrp -edit -value1 false miImportonsTraverseCtrl;
			miSetImportonTraverseValue();
		}

	}
	if(setParentToMentalTab("Features"))
	{
		checkBoxGrp -edit -enable (! $IPCheckBox) miImportonsFeatureCtrl;
		if ( $IPCheckBox)
		{
			checkBoxGrp -edit -label1 (getPluginResource("Mayatomr", "kImportonEnforced")) miImportonsFeatureCtrl;
			checkBoxGrp -edit -value1 $IPCheckBox miImportonsFeatureCtrl;
			miSetImportonStateFeatureValue();
		}
		else
		{
			checkBoxGrp -edit -label1 (getPluginResource("Mayatomr", "kImportons")) miImportonsFeatureCtrl;
			// Update the state.
			if (! $impEnabled)
			{
				checkBoxGrp -edit -value1 false miImportonsFeatureCtrl;
				miSetImportonStateFeatureValue();
			}
		}

		checkBoxGrp -edit -enable $rayTrace miIPFeatureCtrl;
	}
	mentalRayOptionsCheckImporton();

	setParent $oldParent;
}

global proc mentalRayOptionsCheckAO()
{
	if (!size(`ls miDefaultOptions`))
		return;

	string $oldParent = `setParent -q`;
	global int $gMiStringOptAOStateIndex;
	global int $gMiStringOptAOCacheIndex;

	int $rayTrace = `getAttr "miDefaultOptions.rayTracing"`;
	int $AOCheckBox = miGetBoolStringOptionValue($gMiStringOptAOStateIndex);
	int $AOCacheBox = miGetBoolStringOptionValue($gMiStringOptAOCacheIndex);

	if(setParentToMentalTab("IndirectLighting"))
	{
		int $enableAOOptGroup = ($AOCheckBox && $rayTrace);
		int $enableAOCacheGroup = ($enableAOOptGroup && $AOCacheBox);

		layout -edit -enable $rayTrace miAmbientOcclusionGroup;
		layout -edit -enable $enableAOOptGroup miAmbientOcclusionOptionsGroup;
		layout -edit -enable $enableAOCacheGroup miAmbientOcclusionOptionsCacheGroup;
	}
	if(setParentToMentalTab("Features"))
	{
		checkBoxGrp -edit -enable $rayTrace miAOFeatureCtrl;
	}

	setParent $oldParent;
}

global proc mentalRayOptionsCheckPhotons()
{
	if (!size(`ls miDefaultOptions`))
		return;

	string $oldParent = `setParent -q`;

	int $rayTrace = `getAttr "miDefaultOptions.rayTracing"`;
	int $caustics = `getAttr "miDefaultOptions.caustics"`;
	int $globIllum= `getAttr "miDefaultOptions.globalIllum"`;
	int $enablePhoton = ($rayTrace && ($caustics || $globIllum));

	if(setParentToMentalTab("IndirectLighting"))
	{
		layout -edit -enable $enablePhoton miPhotonMapGroup;
		layout -edit -enable $enablePhoton miPhotonTracingGroup;
		layout -edit -enable $enablePhoton miPhotonVolumeGroup;
	}
	if(setParentToMentalTab("Features"))
		control -edit -enable $enablePhoton miExtraFeaturesPhotonAutoVolume;

	mentalRayOptionsCheckDiagnostics();

	setParent $oldParent;
}

global proc mentalRayOptionsCheckFinalGather()
{
	if (!size(`ls miDefaultOptions`))
		return;

	string $oldParent = `setParent -q`;

	if(setParentToMentalTab("IndirectLighting"))
	{
		int $rayTracing = `getAttr "miDefaultOptions.rayTracing"`;
		int $globIllum= `getAttr "miDefaultOptions.globalIllum"`;
		int $finalGather = `getAttr "miDefaultOptions.finalGather"`;
		int $enableFinalGather = ($rayTracing && $finalGather);
		int $enableFGFast = ($finalGather && $globIllum);

		layout -edit -enable $enableFinalGather miFinalGatherGroup;
		layout -edit -enable $enableFinalGather miFinalGatherMapGroup;
		layout -edit -enable $enableFinalGather miFinalGatherQualityGroup;
		layout -edit -enable $enableFinalGather miFinalGatherTracingGroup;
		control -edit -enable $enableFGFast miFinalGatherFast;

		// FG on cause disabling IP, FG have precendance.

		mentalRayOptionsCheckFinalGatherMode();
	}

	mentalRayOptionsCheckDiagnostics();

	setParent $oldParent;
}

global proc mentalRayOptionsUpdateFinalGatherMode()
{
	if (!size(`ls miDefaultOptions`))
		return;
	string $oldParent = `setParent -q`;

	if(setParentToMentalTab("IndirectLighting"))
	{
        int $fgMode = 2;
        int $value = `optionMenuGrp -q -select miFinalGatherModeCtrl`;
        switch($value) {
            default:
            case 1: $fgMode = 2; break; // automatic
            case 2: $fgMode = 3; break; // multiframe
            case 3: $fgMode = 4; break; // force
            case 4: $fgMode = 1; break; // compatible
        }
        setAttr miDefaultOptions.finalGatherMode $fgMode;
	}

	setParent $oldParent;
}

global proc mentalRayOptionsCheckFinalGatherMode()
{
	if (!size(`ls miDefaultOptions`))
		return;
	string $oldParent = `setParent -q`;

	if (`layout -q -enable "miFinalGatherGroup"` && setParentToMentalTab("IndirectLighting"))
	{
		int $fgMode = `getAttr "miDefaultOptions.finalGatherMode"`;
		int $value = 0;
		int $doPoints = 1;
		int $doRadius = 0;
		switch ($fgMode) {
			case 0:
			case 1: $value = 4; $doPoints = 0; $doRadius = 1; break;
			default:
			case 2: $value = 1; $doPoints = 1; $doRadius = 0; break;
			case 3: $value = 2; $doPoints = 1; $doRadius = 1; break;
			case 4: $value = 3; $doPoints = 0; $doRadius = 0; break;
		}
        optionMenuGrp -edit -select $value miFinalGatherModeCtrl;
		layout -edit -enable $doRadius miFinalGatherRadiusGroup;
		control -edit -enable $doPoints miFinalGatherPoints;
    }

	setParent $oldParent;
}

// Only one of "Enable Map Visualizer" should be enabled.
// If either of the control is enabled, and the map does not have name,
// assign a default map name.
//
global proc MapVisualizerOptionChanged(string $plug)
{
	if (!size(`ls miDefaultOptions`))
		return;

	string $pmap = "miDefaultOptions.photonMapVisualizer";
	string $fgmap = "miDefaultOptions.finalGatherMapVisualizer";

	if (($plug != $pmap) && ($plug != $fgmap))
		return;

	if (!`getAttr $plug`)
		return;

	// the control is enabled.
	if ( $plug == $pmap ) {
		// "Enable Map Visualizer" in FG section is on. Disalbe it
		if ( `getAttr $fgmap` )
			setAttr $fgmap 0;
		// assign a default map name
		if ( `getAttr "miDefaultOptions.photonMapFilename"` == "" )
			setAttr "miDefaultOptions.photonMapFilename"
				-type "string" "default.pmap";
		}
	else {
		// "Enable Map Visualizer" in GI section is on. Disalbe it
		if ( `getAttr $pmap` )
			setAttr $pmap 0;
		// assign a default map name
		if ( `getAttr "miDefaultOptions.finalGatherFilename"` == "" )
			setAttr "miDefaultOptions.finalGatherFilename"
				-type "string" "default.fgmap";
		}
}

global proc miPresetMenuFinalGather(int $index)
{
global	string $miPresetsFinalGather[];
global	string $miOptions;
	int $rays, $pnts;
	float $dens;

	string $entry = $miPresetsFinalGather[$index];
	string $tokens[];

	tokenize($entry, $tokens);
	$rays = $tokens[1];
	$dens = $tokens[2];
	$pnts = $tokens[3];

	setAttr ($miOptions + ".finalGatherRays") $rays;
	setAttr ($miOptions + ".finalGatherPresampleDensity") $dens;
	setAttr ($miOptions + ".finalGatherPoints") $pnts;

	miDebug ("selected menu item: " + $index);
}

global proc miCreateEnvironmentFrame(string $parent)
{
	setParentToMentalTab("IndirectLighting");
	setParent $parent;

	string $fullPath = `setParent -q` + "|miIndirectLightingLayout";
	if (`columnLayout -exists $fullPath`)
		return;

	setUITemplate -pushTemplate attributeEditorTemplate;
	columnLayout -adjustableColumn true miEnvironmentLayout;

	rowLayout -numberOfColumns 3 miIblLayout;
		text -label (getPluginResource("Mayatomr", "kImageBasedLighting"));
		button -label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabCreate"))
			-command "miCreateIbl"
				miCreateIblButton;
		symbolButton -image "inArrow.png"
			-command "miPropagateIbl"
				miOpenIblButton;
	setParent ..;

	scriptJob -p miIblLayout -rp
		-con "mentalrayGlobals.imageBasedLighting" miUpdateIbl;

	miUpdateIbl();

	rowLayout -numberOfColumns 3 miSunSkyLayout;
		text -label (getPluginResource("Mayatomr", "kPhysicalSunSky"));
		button -label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabCreate"))
			-command "miCreateSunSky"
				miCreateSunSkyButton;
		symbolButton -image "inArrow.png"
			-command "miPropagateSunSky"
				miOpenSunSkyButton;
	setParent ..;

	if (!`attributeQuery -exists -node mentalrayGlobals sunAndSkyShader`)
		addAttr -longName "sunAndSkyShader"
			-attributeType "message" -hidden true
			-writable true -storable true
			mentalrayGlobals;

	scriptJob -p miSunSkyLayout -rp
		-con "mentalrayGlobals.sunAndSkyShader" miUpdateSunSky;

	miUpdateSunSky();

	setParent ..;
	setUITemplate -popTemplate;

}

// Description:  This procedure is called to create the frame named
//      "Indirect Lighting".
//
global proc miCreateIndirectLightingFrame(string $parent)
{
	setParentToMentalTab("IndirectLighting");
	setParent $parent;

	string $fullPath = `setParent -q` + "|miIndirectLightingLayout";
	if (`columnLayout -exists $fullPath`)
		return;

	setUITemplate -pushTemplate attributeEditorTemplate;
	columnLayout -adjustableColumn true miIndirectLightingLayout;

	// Environment
	//
	frameLayout -label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabRaytracing"))
		-cll true -cl false
			miEnvironmentFrame;
		miCreateEnvironmentFrame
			miEnvironmentFrame;
	setParent ..;

	// Global Illumination
	//
	frameLayout -label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabGlobIllum"))
		-cll true -cl false
		-annotation (getPluginResource("Mayatomr", "kRenderGIEffectsWithPhotonTracing"))
			miGlobalIlluminaitonFrame;
		miCreateGlobalIlluminationFrame
			miGlobalIlluminaitonFrame;
	setParent ..;

	// Caustics
	//
	frameLayout -label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabCaustic"))
		-cll true -cl true
		-annotation (getPluginResource("Mayatomr", "kRenderCausticsWithPhotonTracing"))
			miCausticsFrame;
		miCreateCausticsFrame
			miCausticsFrame;
	setParent ..;

	// Photon Tracing
	//
	frameLayout -label (getPluginResource("Mayatomr", "kPhotonTracing"))
		-cll true -cl true
		-annotation (getPluginResource("Mayatomr", "kPhotonTracingAnnot"))
			miPhotonTracingFrame;
		miCreatePhotonTracingFrame
			miPhotonTracingFrame;
	setParent ..;

	// Photon Map
	//
	frameLayout -label (getPluginResource("Mayatomr", "kPhotonMap"))
		-cll true -cl true
		-annotation (getPluginResource("Mayatomr", "kPhotonMapOptions"))
			miPhotonMapFrame;
		miCreatePhotonMapFrame
			miPhotonMapFrame;
	setParent ..;

	// Photon Volume
	//
	frameLayout -label (getPluginResource("Mayatomr", "kPhotonVolume"))
		-cll true -cl true
		-annotation (getPluginResource("Mayatomr", "kImportonsAnnot"))
			miPhotonVolumeFrame;
		miCreatePhotonVolumeFrame
			miPhotonVolumeFrame;
	setParent ..;

	// Importons
	//
	frameLayout -label (getPluginResource("Mayatomr", "kImportons"))
		-cll true -cl true
		-annotation (getPluginResource("Mayatomr", "kPhotonVolumeAnnot"))
			miImportonsFrame;
		miCreateImportonsFrame
			miImportonsFrame;
	setParent ..;

	// Final Gathering
	//
	frameLayout -label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabFinalGathering"))
		-cll true -cl false
		-annotation (getPluginResource("Mayatomr", "kRenderGIEffectsWithFinalGathering"))
			miFinalGatherFrame;
		miCreateFinalGatherFrame
			miFinalGatherFrame;
	setParent ..;

	// Irradiance Particles
	//
	frameLayout -label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabIrradPartical"))
		-cll true -cl true
		-annotation (getPluginResource("Mayatomr", "kIrradianceParticlesAnnot"))
			miIrradianceParticlesFrame;
		miCreateIrradianceParticlesFrame
			miIrradianceParticlesFrame;
	setParent ..;

	// Ambient Occlusion
	//
	frameLayout -label (getPluginResource("Mayatomr", "kcreateMRIndirLightTabAmbientOcclusion"))
		-cll true -cl true
		-annotation (getPluginResource("Mayatomr", "kAmbientOcclusionAnnot"))
			miAmbientOcclusionFrame;
		miCreateAmbientOcclusionFrame
			miAmbientOcclusionFrame;
	setParent ..;

	// Update controls in Indirect Lighting Frame
	//
	mentalRayOptionsCheckRayTracing();

	setUITemplate -popTemplate;
	setParent ..;
}

// ------------------------------------------------------
//  Code to create the "Indirect Lighting" tab.
//
global proc createMentalRayIndirectLightingTab()
{
	// Make sure the default mentalray globals nodes exist.
	//
	miCreateDefaultNodes();

	// Create the tab.
	//
	string $parentForm = `setParent -query`;
	setUITemplate -pushTemplate attributeEditorTemplate;
	scrollLayout -childResizable true -horizontalScrollBarThickness 0 scrollLayout;
	columnLayout -adjustableColumn true mentalIndirectLightingTabColumn;

	columnLayout -adj true miIndirectLightingFrame;
		miCreateIndirectLightingFrame miIndirectLightingFrame;
	setParent ..;

	setParent ..;	// from columnLayout
	setParent ..;	// from scrollLayout

	setUITemplate -popTemplate;

	formLayout -edit
		-af scrollLayout "top" 0
		-af scrollLayout "bottom" 0
		-af scrollLayout "left" 0
		-af scrollLayout "right" 0
			$parentForm;
}

// ------------------------------------------------------
//  Code to update the "Indirect Lighting" tab.
//
global proc updateMentalRayIndirectLightingTab()
{
	string $oldParent = `setParent -query`;
	setParentToMentalTab("IndirectLighting");

	mentalRayOptionsCheckRayTracing();
	mentalRayOptionsCheckCaustics();
	mentalRayOptionsCheckGlobalIllum();
	mentalRayOptionsCheckFinalGather();
	mentalRayOptionsCheckAO();

	setParent $oldParent;
}
