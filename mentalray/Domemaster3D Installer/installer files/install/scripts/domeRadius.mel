/*
  domeRadius V1.5
  by Andrew Hazelden

  This is a Maya MEL script for creating the preview shape for the DomeAFL_FOV
  and DomeAFL_FOV_Stereo field of view settings and the visualizing the dome 
  radius values using the Domemaster3D domePreview surface.

  This script is run by the DomeAFL_FOV and domeAFL_FOV_Stereo AE Template files

  Version History
  ----------------

  Version 1.5 - March 15, 2014
  ------------------------------------

  Version 1.4 - Dec 6, 2013
  ----------------------------
  Updated the domeAFL_FOV_Stereo rig's preview shape to default to the wireframe display mode

  Version 1 -  Oct 6, 2013
  ---------------------------
  Initial Creation

  To use the domeRadius MEL script run the following MEL commands:
  source "domeRadius.mel";
  domeRadius("domeAFL_FOV");
  
*/


//Create the domePreview surface
global proc domeRadius(string $nodeName){
  string $connectedCamera = getConnectionList($nodeName);
  //string $connectedCamera = getConnectionList("domeAFL_FOV");
  
  //Make sure a camera is connected to the lens shader
  if ($connectedCamera != "<none>"){
    //Add the FOV preview NURBS surface shape
    addDomePreviewRig($connectedCamera, $nodeName);
  }
}


global proc string getConnectionList( string $object){
  //--------------------------------------------------------
  //Scan for active lens shader connections
  //--------------------------------------------------------
  
  //Sample debugging camera name
  //string $baseNodeName = "center_domeAFL_FOV_Stereo";
  //string $baseNodeName = "domeAFL_FOV";
  string $baseNodeName = $object;
  
  if(  (`objExists ($baseNodeName)`) && ((`nodeType($baseNodeName)`== "domeAFL_FOV") || (`nodeType($baseNodeName)`== "domeAFL_FOV_Stereo") )){
    //Scan the lens shader connections
    //Extra flags: -connections true
    string $cameras[] = `listConnections -type "camera"  ($baseNodeName+".message")`;
    //Result: stereoCamera stereoCameraRight stereoCameraLeft // 

    //Check how many cameras are connected
    int $domeLensConnectionCount = `size($cameras)`;

    //Debug print the node connections
    print "\nConnected Cameras:\n";
    print $cameras;
    print "\n";

    print "Output Connections:\n";
    print $domeLensConnectionCount; 
    print "\n\n";

    if($domeLensConnectionCount > 0){
    print("A lens shader to camera connection was found.\n");
    //addDomePreviewRig($cameras[0]);
      return $cameras[0];
    }else{
      print("No lens shader to camera connections were located.\n");
      return "<none>";
    }
  } else {
    print("The lens shader doesn't exist!\n");
    return "<none>";
  }
}


//Add a new camera rig to the scene
global proc addDomePreviewRig (string $cameraName, string $lensShaderName){
  //Add a domeAFL_FOV camera
  //python ("import domeCamera as domeCamera");
  //string $camName = `python("domeCamera.createFulldomeStereoRig()")`;

  //select -r domeAFL_FOV_Camera1|domePreview ;

  //Check if the camera exists and the dome preview surface exists
  if((`objExists ($cameraName)`)  && (`objExists ($cameraName+"|"+$cameraName+"PreviewHemisphere")`)   ) {
    //warning("domePreview surface exists. Skipping.\n");
    print("PreviewHemisphere surface exists. Skipping.\n");
    //select ($cameraName+"|"+"domePreview");
  } else {
    print("No PreviewHemisphere surface exists. Creating a new surface.\n");
    
    //Load the lens shader in the Attribute Editor window so the extra attribute controls are added
    //showEditorExact($lensShaderName) ;
    
    //---------------------------------------------------------------------------------------
    // Create a revolved NURBS Hemisphere
    //---------------------------------------------------------------------------------------
    //Sections 8
    //Spans 8

    //Create the base curve with a 90 degree arc
    string $domeRadiusCurveName[] = `circle -name ($cameraName+"PreviewCurve") -c 0 0 0 -nr 0 0 1 -sw 90 -r 1 -d 3 -ut 0 -tol 0.01 -s 4 -ch 1 `;

    //Get the curve's shape node name
    string $domeCurveShape = getObjectShapeNode($domeRadiusCurveName[0]);   
    
    //Revolve the base 90 degree arc curve into a NURBS dome shape
    string $domeRadiusSurfaceName[] = `revolve  -name ($cameraName+"PreviewHemisphere") -ch 1 -po 0 -rn 0 -ssw 0 -esw 360 -ut 0 -tol 0.01 -degree 3 -s 8 -ulp 1 -ax 0 1 0 ($domeCurveShape)`;
    // Result: DomeStereoCameraPreviewCurve1 makeNurbCircle1 // 

    string $domeSurfaceShape = getObjectShapeNode($domeRadiusSurfaceName[0]);
    //DomeStereoCameraPreviewCurve1Shape
    
    //print "\nDome Preview elements:\n";
    //print $domeRadiusSurfaceName;
    //print "\n";
    
    //print "\nDome Preview shape node:\n";
    //print $domeSurfaceShape;
    //print "\n";
    
    //Find out the preview curve's makeNurbCircle node name
    string $makeCurveShapeName = $domeCurveShape;
    string $makeCurveObject[] = `listConnections -type "makeNurbCircle"  ($makeCurveShapeName+".create")`;
    string $makeCurveNodeName = $makeCurveObject[0];

    print("The NURBS circle creation node is: " + $makeCurveNodeName + "\n");

    //---------------------------------------------------------------------------------------
    // Make the NURBS Curve able to be moved without effecting the revolves
    //---------------------------------------------------------------------------------------
    
    //Find out the name of the "makeNurbCircle" node that is used to create the DomeStereoCameraPreviewCurve shape
    //string $makeCurveShapeName = "domeAFL_FOV_Camera1PreviewCurveShape";
    string $makeRevolveObjects[] = `listConnections -type "revolve"  ($makeCurveShapeName+".worldSpace")`;
    string $makeRevolveNodeName = $makeRevolveObjects[0];
    print("The circle creation node is: " + $makeRevolveNodeName + "\n");

    //Reconnect the curve to the revolve node using local space
    //This replaces the curve's previous .worldSpace connection that inhibited the
    //ability to move the curve without effecting the revolve
    connectAttr -f ($makeCurveShapeName+".local") ($makeRevolveNodeName+".inputCurve");
    //connectAttr -f domeAFL_FOV_Camera1PreviewCurveShape.local revolve1.inputCurve;
    // Result: Connected domeAFL_FOV_Camera1PreviewCurveShape.local to revolve1.inputCurve. // 

    //---------------------------------------------------------------------------------------
    //Set up display + shading overrides
    //---------------------------------------------------------------------------------------
     
    //Set the object to render as a wireframe without shading
    setAttr ($domeSurfaceShape+".overrideEnabled") 1;
    
    //Toggle the NURBS surface shading Off
    //setAttr ($domeSurfaceShape+".overrideShading") 0;
    
    //Toggle the NURBS surface shading On
    //setAttr  ($domeSurfaceShape+".overrideShading") 1;

    //set the dome surface to a reference mode to make it unselectable
    setAttr ($domeRadiusSurfaceName[0]+".overrideDisplayType") 2;

    //Make object invisible in renders
    setAttr ($domeRadiusSurfaceName[0]+".primaryVisibility") 0;
    setAttr ($domeRadiusSurfaceName[0]+".castsShadows") 0;
    setAttr ($domeRadiusSurfaceName[0]+".receiveShadows") 0;
    setAttr ($domeRadiusSurfaceName[0]+".motionBlur") 0;
    setAttr ($domeRadiusSurfaceName[0]+".visibleInReflections") 0;
    setAttr ($domeRadiusSurfaceName[0]+".visibleInRefractions") 0;
    setAttr ($domeRadiusSurfaceName[0]+".smoothShading") 0;
    
    //Make object invisible in mental ray renders
    setAttr ($domeRadiusSurfaceName[0]+".miFinalGatherCast") 0;
    setAttr ($domeRadiusSurfaceName[0]+".miFinalGatherReceive") 0;
    setAttr ($domeRadiusSurfaceName[0]+".miRefractionReceive") 0;
    setAttr ($domeRadiusSurfaceName[0]+".miReflectionReceive") 0;
    setAttr ($domeRadiusSurfaceName[0]+".miTransparencyReceive") 0;
    setAttr ($domeRadiusSurfaceName[0]+".miTransparencyCast") 0;
 
    //Template the preview geometry to avoid selections
    //setAttr ($domeSurfaceShape+".template") 1;
       
    //Put the domeSurface "PreviewShape" inside the DomeStereoCamera group
    //Have the revolved shape aligned relative to the camera --relative
    parent ($domeRadiusSurfaceName[0])  $cameraName;
    
    //Parent the NURBS revolve curve to the camera
    parent ($domeRadiusCurveName[0]) $cameraName ;
    
    //Turn the curve shape into an invisible curve "history" object
    setAttr ($domeCurveShape+".intermediateObject") 1;
        
    //Check if the Dome Radius attr exists on the lens shader node before linking the dome radius values
    if(`attributeExists "Dome_Radius" $lensShaderName`){
      //Connection the dome radius value to the dome surface's scale attributes
      connectAttr -f ($lensShaderName+".Dome_Radius") ($domeRadiusSurfaceName[0]+".scaleX");
      connectAttr -f ($lensShaderName+".Dome_Radius") ($domeRadiusSurfaceName[0]+".scaleY");
      connectAttr -f ($lensShaderName+".Dome_Radius") ($domeRadiusSurfaceName[0]+".scaleZ");
      print("Linking the Dome Radius control to the preview shape.\n");
    }
    else{
      print("The Dome Radius control is missing from the lens shader attributes.\n");
    }
      
    //Expression to control the field of view preview sweep angle 
    //Note: $domeRadiusSurfaceName[0] holds the value for makeNurbCircle1
    string $expressionBuilderString = $makeCurveNodeName + ".sweep = " + $lensShaderName + ".FOV_Angle/2;"; 
    string $domeRadiusExpressionName = `expression -s $expressionBuilderString -o  ($domeRadiusCurveName[1]) -ae 1 -uc all -name "domeRadiusExpr"`;

    //select -cl;
      
    //---------------------------------------------------------------------------------------  
    //Map the custom preview shape + curve names to the lens shader extra attr fields 
    //---------------------------------------------------------------------------------------
    //string $nodeName = "center_domeAFL_FOV_Stereo";   
    string $nodeName = $lensShaderName;
    
    //Add the NURBS preview shape name
    string $attrName ="previewShape";
    //string $shapeName ="DomeStereoCameraPreviewShape";
    string $shapeName = ($domeRadiusSurfaceName[0]);
    if (!`attributeExists $attrName $nodeName`) {
      addAttr -ln $attrName -dt "string" $nodeName;
      setAttr -e-channelBox true ($nodeName+"."+$attrName);
      setAttr -type "string" ($nodeName+"."+$attrName) $shapeName;
      print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
    }
    
    //Add the NURBS preview curve name
    string $attrName ="previewCurve";
    //string $shapeName ="DomeStereoCameraPreviewCurve";
    string $shapeName = ($domeRadiusCurveName[0]);
    if (!`attributeExists $attrName $nodeName`) {
      addAttr -ln $attrName -dt "string" $nodeName;
      setAttr -e-channelBox true ($nodeName+"."+$attrName);
      setAttr -type "string" ($nodeName+"."+$attrName) $shapeName;
      print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
    }
      
      
    //lock the preview shape transforms
    // setAttr -lock true ($domeRadiusSurfaceName[0]+".tx");
    // setAttr -lock true ($domeRadiusSurfaceName[0]+".ty");
    // setAttr -lock true ($domeRadiusSurfaceName[0]+".tz");
    // setAttr -lock true ($domeRadiusSurfaceName[0]+".rx");
    // setAttr -lock true ($domeRadiusSurfaceName[0]+".ry");
    // setAttr -lock true ($domeRadiusSurfaceName[0]+".rz");
    
    //---------------------------------------------------------------------------------------
    //Create the FOV Preview material
    //---------------------------------------------------------------------------------------
    //string $lensShaderName = "domeAFL_FOV";
    //string $domeSurfaceShape = "domeAFL_FOV_Camera1PreviewHemisphere";

    //Create an orange dome shape to visualize the zero parallax radius zone
    //Orange Color = R 212/G 59/B 26
    //Transparency Color = R 212/G 59/B 26
    //Transparency = 25% / RGB 0.54/0.54/0.54

    if (`nodeType($lensShaderName)`== "domeAFL_FOV"){
      //Create the surfaceShader name based upon the current camera name : domeAFL_FOVPreviewMaterial
      string $previewMaterialName = $cameraName + "PreviewMaterial";

      //Check if the camera exists and the dome preview surface exists
      if(`objExists ($previewMaterialName)`) {
        print("The FOV Preview SurfaceShader material exists. Regenerating.\n");
        select -r $previewMaterialName ;
        delete;
      }
      
      print("No FOV Preview SurfaceShader exists. Creating a new surface shader.\n");
      string $domeRadiusMat = `shadingNode -asShader surfaceShader -name $previewMaterialName`;
      
      //Set the color to orange
      //setAttr ($domeRadiusMat+".outColor") -type double3  0.831373 0.231373 0.101961 ;
      //Add a default semi-transparent setting
      //setAttr ($domeRadiusMat+".outTransparency") -type double3 0.54 0.54 0.54 ;

      //Add a new shading group to the surface shader
      string $previewMaterialSGName = $previewMaterialName + "SG";
      select $domeRadiusMat;
      string $domeRadiusSG =`sets -renderable true -noSurfaceShader true -empty -name ($previewMaterialSGName)`;
      connectAttr -f ($domeRadiusMat+".outColor") ($domeRadiusSG+".surfaceShader");
      sets -e -forceElement ($domeRadiusSG) $domeSurfaceShape;
      
      //Connect the lens shader color controls to the ZeroParallaxRadiusMaterialcenter_domeAFL_FOV_Stereo material
      //Connect the FOV preview color swatch to the surface shader
      connectAttr -f ($lensShaderName+".fovPreviewColor") ($domeRadiusMat+".outColor");
      //Connect the FOV preview transparency slider to the surface shader transparency attrs
      connectAttr -f ($lensShaderName+".fovPreviewTransparency") ($domeRadiusMat+".outTransparencyR");
      connectAttr -f ($lensShaderName+".fovPreviewTransparency") ($domeRadiusMat+".outTransparencyG");
      connectAttr -f ($lensShaderName+".fovPreviewTransparency") ($domeRadiusMat+".outTransparencyB");   
    }else if (`nodeType($lensShaderName)`== "domeAFL_FOV_Stereo"){
      //Create the surfaceShader name based upon the current camera name : domeAFL_FOV_StereoZeroParallaxRadiusMaterial
      string $previewMaterialName = $cameraName + "ZeroParallaxRadiusMaterial";

      //Check if the camera exists and the dome preview surface exists
      if(`objExists ($previewMaterialName)`) {
        print("The zero parallax SurfaceShader material exists. Regenerating.\n");
        select -r $previewMaterialName ;
        delete;
      }
      
      print("No zero parallax SurfaceShader exists. Creating a new surface shader.\n");
      string $domeRadiusMat = `shadingNode -asShader surfaceShader -name $previewMaterialName`;
      
      //Set the color to orange
      //setAttr ($domeRadiusMat+".outColor") -type double3  0.831373 0.231373 0.101961 ;
      //Add a default semi-transparent setting
      //setAttr ($domeRadiusMat+".outTransparency") -type double3 0.54 0.54 0.54 ;

      //Add a new shading group to the surface shader
      string $previewMaterialSGName = $previewMaterialName + "SG";
      select $domeRadiusMat;
      string $domeRadiusSG =`sets -renderable true -noSurfaceShader true -empty -name ($previewMaterialSGName)`;
      connectAttr -f ($domeRadiusMat+".outColor") ($domeRadiusSG+".surfaceShader");
      sets -e -forceElement ($domeRadiusSG) $domeSurfaceShape;

       //Connect the lens shader color controls to the ZeroParallaxRadiusMaterialcenter_domeAFL_FOV_Stereo material
      //Connect the FOV preview color swatch to the surface shader
      connectAttr -f ($lensShaderName+".zeroParallaxColor") ($domeRadiusMat+".outColor");
      //Connect the zeroParallaxTransparency slider to the surface shader transparency attrs
      connectAttr -f ($lensShaderName+".zeroParallaxTransparency") ($domeRadiusMat+".outTransparencyR");
      connectAttr -f ($lensShaderName+".zeroParallaxTransparency") ($domeRadiusMat+".outTransparencyG");
      connectAttr -f ($lensShaderName+".zeroParallaxTransparency") ($domeRadiusMat+".outTransparencyB");
    }

    //---------------------------------------------------------------------------------------
    //Set the stereo camera preview shape defaults
    //---------------------------------------------------------------------------------------
    if (`nodeType($lensShaderName)`== "domeAFL_FOV_Stereo"){
        //Check for the  .Camera = 0 (center) view
        int $cameraView = `getAttr ($lensShaderName+".Camera")`;
        if ($cameraView == 0){
          //Set the center view to show the zero parallax shape
          setAttr ($lensShaderName+".zeroParallaxDisplayMode") 1;
        } else { 
          //Set the left and right views to hide the zero parallax shape
          setAttr ($lensShaderName+".zeroParallaxDisplayMode") 0;
        }
    }
    
  
    //---------------------------------------------------------------------------------------
    //Create the Zero Parallax Mode expression
    //---------------------------------------------------------------------------------------
    
    string $exprName = "";
    string $previewAttrName = "";
    
    //string $lensShaderName = "center_domeAFL_FOV_Stereo";
    if (`nodeType($lensShaderName)`== "domeAFL_FOV_Stereo"){
      $previewAttrName = "zeroParallaxDisplayMode";
    } else {
      $previewAttrName = "fovDisplayMode";
    }
    
    $exprName = $previewAttrName + "Expr";
    
    //string $domeSurfaceShape = "DomeStereoCameraPreviewHemisphereShape";
    //string $domeRadiusTransform = "DomeStereoCameraPreviewHemisphere";
    string $domeRadiusTransform =  $domeRadiusSurfaceName[0];
    string $PreviewShapeExpr = "";

    $PreviewShapeExpr += "// Custom " + $previewAttrName + " Preview Shape Expressions\n\n";
    $PreviewShapeExpr += "if (  " + $lensShaderName + "." + $previewAttrName + " == 0){\n";
    $PreviewShapeExpr += "  //Off Mode\n";
    $PreviewShapeExpr += "  " + $domeSurfaceShape + ".overrideDisplayType = 2;\n";
    $PreviewShapeExpr += "  " + $domeRadiusTransform + ".template = 0;\n";
    $PreviewShapeExpr += "  " + $domeRadiusTransform + ".visibility = 0;\n";
    $PreviewShapeExpr += "} else if (" + $lensShaderName + "." + $previewAttrName + " == 1 ){\n";
    $PreviewShapeExpr += "  //Wireframe Mode\n";
    $PreviewShapeExpr += "  " + $domeRadiusTransform + ".template = 1;\n";
    $PreviewShapeExpr += "  " + $domeRadiusTransform + ".visibility = 1;\n";
    $PreviewShapeExpr += "} else if (" + $lensShaderName + "." + $previewAttrName + " == 2 ){\n";
    $PreviewShapeExpr += "  //Shaded Mode\n";
    $PreviewShapeExpr += "  string $currentPanel = \"modelPanel4\";\n";
    $PreviewShapeExpr += "  if ( `modelEditor -exists $currentPanel` )\n";
    $PreviewShapeExpr += "  modelEditor -edit -wireframeOnShaded 0 $currentPanel;\n";
    $PreviewShapeExpr += "  string $currentPanel = \"StereoPanel\";\n";
    $PreviewShapeExpr += "  if ( `modelEditor -exists $currentPanel` )\n";
    $PreviewShapeExpr += "  modelEditor -edit -wireframeOnShaded 0 $currentPanel;\n";
    $PreviewShapeExpr += "  " + $domeSurfaceShape + ".overrideDisplayType = 2;\n";
    $PreviewShapeExpr += "  " + $domeRadiusTransform + ".template = 0;\n";
    $PreviewShapeExpr += "  " + $domeRadiusTransform + ".visibility = 1;\n";
    $PreviewShapeExpr += "} else if (" + $lensShaderName + "." + $previewAttrName + " == 3 ){\n";
    $PreviewShapeExpr += "  //Wireframe on Shaded Mode\n";
    $PreviewShapeExpr += "  string $currentPanel = \"modelPanel4\";\n";
    $PreviewShapeExpr += "  if ( `modelEditor -exists $currentPanel` )\n";
    $PreviewShapeExpr += "  modelEditor -edit -wireframeOnShaded 1 $currentPanel;\n";
    $PreviewShapeExpr += "  string $currentPanel = \"StereoPanel\";\n";
    $PreviewShapeExpr += "  if ( `modelEditor -exists $currentPanel` )\n";
    $PreviewShapeExpr += "  modelEditor -edit -wireframeOnShaded 1 $currentPanel;\n";
    $PreviewShapeExpr += "  " + $domeSurfaceShape + ".overrideDisplayType = 2;\n";
    $PreviewShapeExpr += "  " + $domeRadiusTransform + ".template = 0;\n";
    $PreviewShapeExpr += "  " + $domeRadiusTransform + ".visibility = 1;\n";
    $PreviewShapeExpr += "}\n";
    $PreviewShapeExpr += "\n";
    $PreviewShapeExpr += "\n";

    //expression -name $exprName -string $PreviewShapeExpr -object $lensShaderName -alwaysEvaluate 1 -unitConversion all ;
   
    //---------------------------------------------------------------------------------------
    // Double Sided Preview Shape Rendering
    //---------------------------------------------------------------------------------------
    
    //string $exprName = "";
    //string $previewAttrName = "";
    //string $PreviewShapeExpr = "";
    //string $domeSurfaceShape = "DomeStereoCameraPreviewHemisphereShape";
    //string $domeRadiusTransform = "DomeStereoCameraPreviewHemisphere";
    //string $lensShaderName = "center_domeAFL_FOV_Stereo";

    $previewAttrName = "doubleSidedShading";
    //$exprName = $previewAttrName + "Expr";

    $PreviewShapeExpr += "// Custom Double Sided Shading Expressions\n\n";
    $PreviewShapeExpr += "if (" + $previewAttrName + " == 0 ){\n";
    $PreviewShapeExpr += "  print(\"Double Sided Shading Enabled\\n\");\n";
    $PreviewShapeExpr += "  setAttr \"" + $domeSurfaceShape + ".doubleSided\" 1; \n";
    $PreviewShapeExpr += "  setAttr \"" + $domeSurfaceShape + ".opposite\" 0; \n";
    $PreviewShapeExpr += "} else if (" + $previewAttrName + " == 1 ){\n";
    $PreviewShapeExpr += "  print(\"Backface Shading Enabled\\n\");\n";
    $PreviewShapeExpr += "  setAttr \"" + $domeSurfaceShape + ".doubleSided\" 0; \n";
    $PreviewShapeExpr += "  setAttr \"" + $domeSurfaceShape + ".opposite\" 0; \n";
    $PreviewShapeExpr += "} else if (" + $previewAttrName + " == 2 ){\n";
    $PreviewShapeExpr += "  print(\"Frontface Shading Enabled\\n\");\n";
    $PreviewShapeExpr += "  setAttr \"" + $domeSurfaceShape + ".doubleSided\" 0; \n";
    $PreviewShapeExpr += "  setAttr \"" + $domeSurfaceShape + ".opposite\" 1; \n";
    $PreviewShapeExpr += "}\n";

    expression -name $exprName -string $PreviewShapeExpr -object $lensShaderName -alwaysEvaluate 1 -unitConversion all ;

    //Force a first value into the double sided shading attribute
    setAttr ($lensShaderName + ".doubleSidedShading") 0;
    
    //---------------------------------------------------------------------------------------
   
    //Lock the camera's scale attributes
    setAttr -lock true ($cameraName+".sx");
    setAttr -lock true ($cameraName+".sy");
    setAttr -lock true ($cameraName+".sz");
        
    print("\nAdded a fulldome camera + preview shape\n");
  }
}


//Find the shape node
//example: print `getObjectShapeNode( "domeAFL_FOV_Camera1")`;
global proc string getObjectShapeNode ( string $object ) {
  string $shapes[] = `listRelatives -children -shapes $object`;
  return $shapes[0];
}


//Find the object's parent node
//example: print `getObjectParentNode( "domeAFL_FOV_CameraShape2")`;
global proc string getObjectParentNode ( string $object ) {
  string $shapes[] = `listRelatives -parent -shapes $object`;
  return $shapes[0];
}

//Test run the script when sourced
//domeRadius();
