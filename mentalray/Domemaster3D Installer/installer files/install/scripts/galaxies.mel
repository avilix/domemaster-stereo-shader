/* 
Script Name: galaxies.mel V1.5
Created by: Martin Watt
http://www.highend3d.com/maya/mel/?section=dynamics#3039

Galaxies 1.2 update by: Andrew Hazelden
New Features: Added custom particle names "galaxyParticle" and "nucleusParticle" to the spiral and elliptical galaxies

Galaxies 1.3 update by Andrew Hazelden
New Features: Added a custom control $speedUp that runs the simulation faster by changing the gravitational field magnitude 

Version 1.5 - March 15, 2014

*/

//Make spiral or elliptical galaxies and connect gravitational fields

// make spiral galaxy using user-defined arguments
global proc string[] spiralGalaxy(int $numStars, 
                                  int $numSpiralArms,
                                  int $radius,   // radius of galaxy
                                  float $numTurns, // number of turns each arm makes about centre
                                  float $centre[], 
                                  float $vel[], 
                                  int $planarDir,
                                  int $speedUp)
{
    string $nucleus; // name of nucleus particle component to be created
    string $field;   // name of field to be created
    string $stars;   // name of stars particle component to be created

    // check requested values are reasonable
    if($numSpiralArms < 2) {
        $numSpiralArms = 2;
        print ("Number of arms requested is too low, setting to " + $numSpiralArms + "\n");
    }
    if($numStars < 10) {
        $numStars = 10;
        print ("Number of stars requested is too low, setting to " + $numStars + "\n");
    }

    // make core particle about which all others will revolve
    string $str1[] = eval("particle  -p " + $centre[0] + " " + $centre[1] + " " + $centre[2] + "\n");
    $nucleus = eval("rename " + $str1[0] +  "\"nucleusParticle\"" + "\n");

    // set velocity
    eval("select -r " + $nucleus + ".pt[0]\n");
    setParticleAttr -at velocity -vv  $vel[0] $vel[1] $vel[2]  -rv 0 0 0 -r 0;

    // save nucleus state
    saveInitialState -attribute position $nucleus;
    saveInitialState -attribute velocity $nucleus;
        
    // now make the stars - use the particle grid tool to create the right number
    float $spacing = 1.0/ float($numStars-1);
    string $str2[] = `particle -ll 0.0 0.0 0.0 -ur 0.0 0.0 1.0 -grs $spacing -c 1` ;
    $stars = eval("rename " + $str2[0] +  "\"galaxyParticle\"" + "\n");

    float $twoPi = 6.283185307;
    float $G = 6.67e-1;  // G as defined in Maya
    float $rootG = sqrt($G);

    int $numParticles = eval("particle -q -ct " + $stars);
    int $numParticlesInArms = $numParticles;
    int $numParticlesPerArm = $numParticlesInArms / $numSpiralArms;
    print ("Number of particles " + $numParticles + " arms " + $numSpiralArms + " particles per arm " + $numParticlesPerArm + "\n");

    // gravitational field magnitude
    //original speed
    //float $mag = float($numParticles) / 1000.0; 
    
    //boosted speed
    float $mag = float($numParticles) / (1000.0 / $speedUp);
      
    // boosted gravitational field magnitude
    //float $mag = float($numParticles) / 10.0;

    // create gravitational field attached to nucleus of appropriate strength
    // use attenuation of 1 since not all the mass is at the centre
    select -r $nucleus;
      string $str3[] = eval("newton -m " + $mag + " -att 1 -mnd 0.1  -mxd -1");
    $field = $str3[1];
    print ("Created field " + $field + "\n");
    print ("Created nucleus " + $nucleus + "\n");

    // gravitational field independent of distance for 1/R but depends on total mass of galaxy
    float $vmag = $rootG * sqrt($mag); // using g propto 1/R, so v is independent of r, propto M
        
     int $nstar = -1;
    float $armAngleStart = 0.0;
    float $armAngleStep = $twoPi / float($numSpiralArms);
    int $i;
    for($i = 0; $i<$numSpiralArms; $i++) {
        $armAngleStart += $armAngleStep;
        //print("Angle of start of arm " + $armAngleStart + "\n");
        for($particle = 0; $particle<$numParticlesPerArm; $particle++) {
            $nstar++;
            eval("select -r " + $stars + ".pt[" + $nstar + "]\n");

            // angle to star
            float $angle = $armAngleStart - float($particle) / float($numParticlesPerArm) * $numTurns * $twoPi;
            //print("Angle to star " + $particle + " is " + $angle + "\n");
    
            // distance to star
            float $dist =  float($particle) * $radius / float($numParticlesPerArm);
            //print("Distance to star " + $particle + " is " + $dist + "\n");

            // randomise angle and distance
            $angle += `rand 0.2` - 0.1;
            $dist  += `rand 2.0` - 1.0;
            float $x = $dist * cos($angle);
            float $y = $dist * sin($angle);

            // position each star within the galaxy
            float $localPos1;
            float $localPos2;
            float $localPos3;
            if($planarDir == 0) {
                $localPos1 = 0.0 + `rand 1.0` - 0.5;
                $localPos2 = $x;
                $localPos3 = $y;
            } else if ($planarDir == 1) {
                $localPos1 = $x;
                $localPos2 = 0.0 + `rand 1.0` - 0.5;
                $localPos3 = $y;
            } else if ($planarDir == 2) {
                $localPos1 = $x;
                $localPos2 = $y;
                $localPos3 = 0.0 + `rand 1.0` - 0.5;
            }
            float $galPos1 = $centre[0] + $localPos1;
            float $galPos2 = $centre[1] + $localPos2;
            float $galPos3 = $centre[2] + $localPos3;
            setParticleAttr -at position -vv $galPos1 $galPos2 $galPos3 -rv 0 0 0 -r 0;

            // set initial velocity to zero
            if($dist < 0.0) $dist = -$dist;
        
            //float $vmag = $rootG; // using g propto 1/R, so v is independent of r

            // this is for g propto 1/R^2
            //float $vmag = $rootG / sqrt($dist);  // Keplerian orbits - 0.815 is magic number

            float $norm = sqrt($x * $x + $y * $y); // normalisation factor to give |v| = 1.0

            float $v1,$v2,$v3;
            if($planarDir == 0) {
                $v1 = $vel[0] + 0.0;
                $v2 = $vel[1] + -$y / $norm * $vmag;
                $v3 = $vel[2] +  $x / $norm * $vmag;
            } else if ($planarDir == 1) {
                $v1 = $vel[0] + -$y / $norm * $vmag;
                $v2 = $vel[1] + 0.0;
                $v3 = $vel[2] + $x / $norm * $vmag;
            } else if ($planarDir == 2) {
                $v1 = $vel[0] + -$y / $norm * $vmag;
                $v2 = $vel[1] + $x / $norm * $vmag;
                $v3 = $vel[2] + 0.0;
            }
            setParticleAttr -at velocity -vv  $v1 $v2 $v3 -rv 0 0 0 -r 0;

        }
    }
    
    // save stars state
    saveInitialState -attribute position $stars;
    saveInitialState -attribute velocity $stars;
        
    print ("Created stars " + $stars + "\n");

    // connect the stars to the nucleus gravitational field
      connectDynamic -f $field $stars;

    // rendering attributes, if required

    // set particle rendering attributes
    //eval("setAttr " + $stars + ".particleRenderType 8"); // select the cloud type
    //eval("setAttr " + $stars + ".radius 0.1");   // select radius
    //eval("setAttr " + $stars + ".betterIllumination 1"); // better illumination

    // set particle rendering attributes
    //eval("setAttr " + $nucleus + ".particleRenderType 8"); // select the cloud type
    //eval("setAttr " + $nucleus + ".radius 1.0");   // select radius
    //eval("setAttr " + $nucleus + ".betterIllumination 1"); // better illumination

    // return the field, nucleus and stars objects
    string $objects[] = {$field, $nucleus, $stars};
    return $objects;

}

global proc string[] ellipticalGalaxy(int $numStars, 
                                      float $centre[], 
                                      float $vel[], 
                                      int $radial,
                                      int $speedUp) // radial or transverse orbits
//
// make elliptical galaxy using user-defined arguments
//
{

    string $nucleus; // name of nucleus particle component to be created
    string $field;   // name of field to be created
    string $stars;   // name of stars particle component to be created

    // check input values are reasonable
    if($numStars < 10) {
        $numStars = 10;
        print ("Number of stars requested is too low, setting to " + $numStars + "\n");
    }

    // make core particle about which all others will revolve
    string $str1[] = eval("particle -p " + $centre[0] + " " + $centre[1] + " " + $centre[2] + "\n");
    $nucleus = eval("rename " + $str1[0] +  "\"nucleusParticle\"" + "\n");
    //$nucleus = $str1[0];

    // set velocity
    eval("select -r " + $nucleus + ".pt[0]\n");
    setParticleAttr -at velocity -vv  $vel[0] $vel[1] $vel[2]  -rv 0 0 0 -r 0;

    // save nucleus state
    saveInitialState -attribute position $nucleus;
    saveInitialState -attribute velocity $nucleus;
        
    // now make the stars


    // now make the stars
    float $min = -0.01;
    float $max = 0.01;
    int $numPerDim = int(0.5+pow($numStars,  float(1.0/3.0)));
    print ("Number of stars requested " + $numStars + " numPerDim " + $numPerDim + "\n");

    float $spacing = ($max - $min)/ float($numPerDim-1);
    string $str2[] = `particle -ll $min $min $min -ur $max $max $max -grs $spacing -c 1` ;
    $stars = eval("rename " + $str2[0] +  "\"galaxyParticle\"" + "\n");
    //$stars = $str2[0];

    float $pi = 3.14159265;
    float $twoPi = 2*$pi;
    float $G = 6.67e-1;  // G as defined in Maya
    float $rootG = sqrt($G);

    int $numParticles = eval("particle -q -ct " + $stars);

    // gravitational field magnitude
    //float $mag = float($numParticles) / 1000.0;
    
    //boosted speed
    float $mag = float($numParticles) / (1000.0 / $speedUp);
     

    // create gravitational field attached to nucleus of appropriate strength
    // use attenuation of 1 since not all the mass is at the centre
    select -r $nucleus;
      string $str3[] = eval("newton -m " + $mag + " -att 1 -mnd 0.1  -mxd -1");
    $field = $str3[1];
    print ("Created field " + $field + "\n");
    print ("Created nucleus " + $nucleus + "\n");

    // gravitational field independent of distance for 1/R but proportional to the total mass
    float $vmag = $rootG * sqrt($mag); // using g propto 1/R, so v is independent of r, propto M
        
    // distribute particles
    for($nparticle = 0; $nparticle<$numParticles; $nparticle++) {

        eval("select -r " + $stars + ".pt[" + $nparticle + "]\n");

        float $theta = `rand $pi`;
        float $phi = `rand $twoPi`;
        float $dist = `rand $numPerDim`;

        float $x = $dist * sin($theta) * cos ($phi);
        float $y = $dist * sin($theta) * sin ($phi);
        float $z = $dist * cos($theta);

        //float $vmag = $rootG * sqrt($mag); // using g propto 1/R, so v is independent of r
        // this is for g propto 1/R^2
        //float $vmag = $rootG * sqrt($mag) / sqrt($dist);  // Keplerian orbits - 0.815 is magic number

         float $norm = sqrt($x * $x + $y * $y); // normalisation factor to give |v| = 1.0

        // radial orbits for now (ie release from stationary to fall through core.
        // dont quite know how to set the velocities for tangential orbits
        float $v1 = $vel[0];// - $y / $norm * $vmag;
        float $v2 = $vel[1];// + $x / $norm * $vmag;
        float $v3 = $vel[2];// + 0.0; // $z / $norm * $vmag;
        setParticleAttr -at velocity -vv  $v1 $v2 $v3 -rv 0 0 0 -r 0;
        float $pos1 = $centre[0] + $x;
        float $pos2 = $centre[1] + $y;
        float $pos3 = $centre[2] + 0.0; // $z;
        setParticleAttr -at position -vv  $pos1 $pos2 $pos3 -rv 0 0 0 -r 0;
    }

    saveInitialState -attribute position $stars;
    saveInitialState -attribute velocity $stars;
        
    print ("Created stars " + $stars + "\n");

    // connect the stars to the core gravitational field
      connectDynamic -f $field $stars;

    // return the field, nucleus and stars objects
    string $objects[] = {$field, $nucleus, $stars};
    return $objects;
}

global proc galaxies()
//
// this is the procedure that actually defines the attributes for the galaxies 
// and makes them
{

    // set 1000 frames of playback
    playbackOptions -e -min 1 -max 1000;

    // storage for all the fields, stars and nuclear components
    string $newObjects[];
    string $field[], $nucleus[], $stars[];
    int $galaxy = -1;
    int $numStars = 2000; // number of stars
    int $numSpiralArms = 5;
    int $radius = 20;
    float $numTurns = 1; // number of times each spiral twists around the centre
    float $pos[3];
    float $vel[3];
    int $planarDir = 0; // normal to plane of disk
    int $speedUp = 1; //speed boost factor

     // make a spiral galaxy
    $galaxy++;
    $numStars = 2000; // number of stars
    $numSpiralArms = 5;
    $radius = 20;
    $numTurns = 1; // number of times each spiral twists around the centre
    $pos = { 10.0,  0.0,  0.0 };
    $vel = { 0.0,  0.0,  0.0 };
    $planarDir = 0;
    $newObjects = spiralGalaxy($numStars, $numSpiralArms, $radius, $numTurns, $pos, $vel, $planarDir, $speedUp);
    $field[$galaxy] = $newObjects[0];
    $nucleus[$galaxy] = $newObjects[1];
    $stars[$galaxy] = $newObjects[2];
    print("Created field " + $field[$galaxy] + " nucleus " + $nucleus[$galaxy] + " stars " + $stars[$galaxy] + "\n");

    // create particle shader
    //shadingNode -asShader particleCloud;
    // Result: particleCloud2 //
    //sets -renderable true -noSurfaceShader true -empty -name particleCloud2SG;
    // Result: particleCloud2SG //
    //connectAttr -f particleCloud2.outColor particleCloud2SG.volumeShader;
    // Result: Connected particleCloud2.outColor to particleCloud2SG.volumeShader //

    // make a spiral galaxy
    $galaxy++;
    $numStars = 2000; // number of stars
    $numSpiralArms = 5;
    $radius = 20;
    $numTurns = 1;
    $pos = { 20.0, -20.0,  0.0};
    $vel = { -2.0,   0.0,  0.0};
    $planarDir = 1;
    $newObjects = spiralGalaxy($numStars, $numSpiralArms, $radius, $numTurns, $pos, $vel, $planarDir, $speedUp);
    $field[$galaxy] = $newObjects[0];
    $nucleus[$galaxy] = $newObjects[1];
    $stars[$galaxy] = $newObjects[2];
     print("Created field " + $field[$galaxy] + " nucleus " + $nucleus[$galaxy] + " stars " + $stars[$galaxy] + "\n");

    //     // make an elliptical galaxy
    //     $galaxy++;
    //     int $radial = 1;
    //     $pos = { -10.0, -20.0, 0.0};
    //     $vel = {   1.0,   0.8, 0.0};
    //     $newObjects = ellipticalGalaxy($numStars, $pos, $vel, $radial, $speedUp);
    //     $field[$galaxy] = $newObjects[0];
    //     $nucleus[$galaxy] = $newObjects[1];
    //     $stars[$galaxy] = $newObjects[2];
    //     print("Created field " + $field[$galaxy] + " nucleus " + $nucleus[$galaxy] + " stars " + $stars[$galaxy] + "\n");

    // make an elliptical galaxy
    //     $galaxy++;
    //     $radial = 1;
    //     $pos = {  10.0, -20.0, 0.0};
    //     $vel = {  -1.0,   1.0, 0.0};
    //     $newObjects = ellipticalGalaxy($numStars, $pos, $vel, $radial, $speedUp);
    //     $field[$galaxy] = $newObjects[0];
    //     $nucleus[$galaxy] = $newObjects[1];
    //     $stars[$galaxy] = $newObjects[2];
    //  print("Created field " + $field[$galaxy] + " nucleus " + $nucleus[$galaxy] + " stars " + $stars[$galaxy] + "\n");


    // connect all gravitational fields to all galaxies
    int $nGalaxies = size($stars);
    print ("Number of galaxies is " + $nGalaxies + "\n");
    int $gal, $otherGal;
    for($gal = 0; $gal < $nGalaxies; $gal++) {
        for($otherGal = 0; $otherGal < $nGalaxies; $otherGal++) {
            if($gal != $otherGal) {
                print("Connecting field " + $field[$gal] + " to stars " + $stars[$otherGal] + "\n");
                print("Connecting field " + $field[$gal] + " to nucleus " + $nucleus[$otherGal] + "\n");
                connectDynamic -f $field[$gal] $stars[$otherGal];
                connectDynamic -f $field[$gal] $nucleus[$otherGal];
            }
        }
    }


    // global shaderGlow settings, if needed
//     setAttr "shaderGlow1.glowIntensity" 1.0;
//     setAttr "shaderGlow1.glowSpread" 0.05;
//     setAttr "shaderGlow1.glowFilterWidth" 2;
//     setAttr "shaderGlow1.haloIntensity" 0.1;
//     setAttr "shaderGlow1.haloSpread" 0.3;


    // frame all in all views
    fitAllPanels -all;

    // finally get a good seat
    string $cam[] = `camera`;
    viewPlace -eye -22 39 45 -la 0 0 0 $cam[0];
    lookThru $cam[0];

}

// set it all up. Just need to do 'play' after this
//galaxies;
