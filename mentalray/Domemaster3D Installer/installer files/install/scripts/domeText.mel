/*
  Dome Text V1.1
  by Andrew Hazelden

  The DomeText script is a title generator that creates raster title graphics in the png, tif, tga, bmp, and psd formats.
  The title creation settings are saved as extra attributes on the file texture nodes. This makes it possible to re-edit exiting title graphics.
  The Dome Text GUI uses ImageMagick from the command line to create rasterized images with your custom text, font styles, and colors.
  
  Note: On Windows the imagemagick tool convert.exe was renamed domeconvert.exe to avoid a name collision with an existing Windows utility of the same name.

  Version History
  ----------------

  Version 1.1 Build 1
  ---------------------
  Oct 6, 2013
  Initial Version

  To use the Dome Text MEL script run the following MEL commands:
  print("Dome Text Tool");
  source "domeText.mel";
  domeText();

 To check Maya's system paths use:
 system("echo $PATH");
*/

//Check what Maya version is active
global proc int getMayaVersion(){
  // Check if we are running Maya 2011 or higher
  float $mayaVersion = `getApplicationVersionAsFloat`;

  // Test this GUI using the Maya 2010 - non-docked GUI mode
  //float $mayaVersion = 2010;

  // Write out the current Maya version number
  //print("Maya " + $mayaVersion + " detected.\n");

  return $mayaVersion;
}

  
//Check the operating system
global proc string getMayaPlatform(){
  //-------------------------------------------------
  //Get the current Maya Platform using python
  //      The $mayaPlatform options are:
  //          "windows", "darwin", "linux"
  //-------------------------------------------------

  string $mayaPlatform = "";
  python( "import sys" );

  if( python( "sys.platform == 'win32'" ) ){
    $mayaPlatform = "windows";
  }else if( python( "sys.platform == 'windows'" ) ){
    $mayaPlatform = "windows";
  }else if( python( "sys.platform == 'darwin'" ) ){
    $mayaPlatform = "darwin";
  }else {
    $mayaPlatform = "linux";
  }

  //print("Running on " + $mayaPlatform + ".\n");
  return $mayaPlatform;
}


//Add the selected font to the nodes' extra attribute fields
global proc addNodeFontAttrs(string $nodeName){
  //Add font name
  string $attrName ="font";
  string $fontName =`optionMenuGrp -query -value menuFontNameSelect`;
  if (!`attributeExists $attrName $nodeName`) {
    addAttr -ln $attrName -dt "string" $nodeName;
    setAttr -e-channelBox true ($nodeName+"."+$attrName);
    setAttr -type "string" ($nodeName+"."+$attrName) $fontName;
    print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
  }
  
  //Add fontStyle
  string $attrName ="fontStyle";
  int $fontStyle =`optionMenuGrp -query -select menuFontWeightSelect`-1;
  if (!`attributeExists $attrName $nodeName`) {
    addAttr -ln $attrName -at "enum" -en "ALL:Bold:Bolder:Lighter:Normal:" $nodeName;
    setAttr -e-channelBox true ($nodeName+"."+$attrName);
    setAttr ($nodeName+"."+$attrName) $fontStyle;
    print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
  }
  
  //Add alignment
  string $attrName ="alignment";
  int $fontAlign =`optionMenuGrp -query -select menuFontAlignSelect`-1;
  if (!`attributeExists $attrName $nodeName`) {
    addAttr -ln $attrName -at "enum" -en "NorthWest:North:NorthEast:West:Center:East:SouthWest:South:SouthEast:" $nodeName;
    setAttr -e-channelBox true ($nodeName+"."+$attrName);
    setAttr ($nodeName+"."+$attrName) $fontAlign;
    print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
  }
  
  //Add font size
  string $attrName ="fontSize";
  int $fontSize = `intSliderGrp -query -value sliderPointSize`;
  if (!`attributeExists $attrName $nodeName`) {
    addAttr -ln $attrName -at long -min 0 -max 2048 $nodeName;
    setAttr -e-channelBox true ($nodeName+"."+$attrName);
    setAttr ($nodeName+"."+$attrName) $fontSize;
    print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
  }
  
  //Add Kerning Size
  string $attrName ="kerningSize";
  float $kerningSize = `floatSliderGrp -query -value sliderKerningSize`;
  if (!`attributeExists $attrName $nodeName`) {
    addAttr -ln $attrName -at double -min -1024 -max 2048 $nodeName;
    setAttr -e-channelBox true ($nodeName+"."+$attrName);
    setAttr ($nodeName+"."+$attrName) $kerningSize;
    print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
  }
  
  //Add Imagemagick custom text
  string $attrName ="imagemagickCustomText";
  string $imagemagickCustomText = `scrollField -query -text scrollImagemagickCustomText`;
  if (!`attributeExists $attrName $nodeName`) {
    addAttr -ln $attrName -dt "string" $nodeName;
    setAttr -e-channelBox true ($nodeName+"."+$attrName);
    setAttr -type "string" ($nodeName+"."+$attrName) $imagemagickCustomText;
    print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
  }
  
}


//Add custom fg and bg color swatches to the nodes' extra attribute fields
global proc addNodeColorAttrs(string $nodeName){
  //string $NodeName = $domeTextFileNode;

  //Color Swatches
  float $foregroundRGBcolor[3] = `colorSliderGrp -query -rgb sliderForeColor`;
  float $backgroundRGBcolor[3] = `colorSliderGrp -query -rgb sliderBackColor`;
  
  //Add foreground Color
  string $attrName ="foregroundColor";
  string $attrRName = "foregroundColorR";
  string $attrGName = "foregroundColorG";
  string $attrBName = "foregroundColorB";
  if (!`attributeExists $attrName $nodeName`) {
    addAttr -ln $attrName -at float3 -uac $nodeName;
    addAttr -ln $attrRName -at "float" -p $attrName $nodeName;
    addAttr -ln $attrGName -at "float" -p $attrName $nodeName;
    addAttr -ln $attrBName -at "float" -p $attrName $nodeName;
    //setAttr -type float3 ($nodeName+"."+$attrName) 1.0 1.0 1.0;
    setAttr -e-channelBox true ($nodeName+"."+$attrName);
    setAttr -type float3 ($nodeName+"."+$attrName) $foregroundRGBcolor[0] $foregroundRGBcolor[1] $foregroundRGBcolor[2];
    print("Adding custom attributes " + $nodeName +"." +$attrName + "\n");
  }

  //Add background Color
  string $attrName ="backgroundColor";
  string $attrRName = "backgroundColorR";
  string $attrGName = "backgroundColorG";
  string $attrBName = "backgroundColorB";
  if (!`attributeExists $attrName $nodeName`) {
    addAttr -ln $attrName -at float3 -uac $nodeName;
    addAttr -ln $attrRName -at "float" -p $attrName $nodeName;
    addAttr -ln $attrGName -at "float" -p $attrName $nodeName;
    addAttr -ln $attrBName -at "float" -p $attrName $nodeName;
    setAttr -e-channelBox true ($nodeName+"."+$attrName);
    //setAttr -type float3 ($nodeName+"."+$attrName) 0.0 0.0 0.0;
    setAttr -type float3 ($nodeName+"."+$attrName) $backgroundRGBcolor[0] $backgroundRGBcolor[1] $backgroundRGBcolor[2];
    print("Adding custom attributes " + $nodeName +"." +$attrName + "\n");
  }

     
  //Add Transparency checkbox
  int $isbackgroundTransparent = `checkBox -query -value checkTransparentBackground`;
  string $attrName ="isBgTransparent";
  if (!`attributeExists $attrName $nodeName`) {
    addAttr -ln $attrName -at bool $nodeName;
    setAttr ($nodeName+"."+$attrName) $isbackgroundTransparent;
    setAttr -e-channelBox true ($nodeName+"."+$attrName);
    print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
  }
}


//Add a DomeText version number attribute to the nodes' extra attribute fields
global proc addDomeTextVersionAttrs(string $nodeName){
  //Add Dome Text Node Version
  string $attrName ="DomeTextVersion";
  int $DomeTextVersion = 1;
  if (!`attributeExists $attrName $nodeName`) {
    addAttr -ln $attrName -at long -min 0 $nodeName;
    setAttr -e-channelBox true ($nodeName+"."+$attrName);
    setAttr ($nodeName+"."+$attrName) $DomeTextVersion;
    print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
  }
}


//Return a value of 1 if the current node is a Dome Text based file node
global proc int isDomeTextNode(string $nodeName){
  string $attrName ="DomeTextVersion";
  int $version = 0;
  //Check if the DomeTextVersion attribute exists
  if (`attributeExists $attrName $nodeName`) {
    //Check the version number is a positive value
    $version = `getAttr ($nodeName+"."+$attrName)`;
    if( $version >= 1){
       //This node is a DomeTextVersion 1 or higher node
      return 1;
    }
    else{
       //This node lacks the correct version number
      return 0;
    }
  }
  else{
    //This node lacks the DomeTextVersion attribute
    return 0;
  }
}


//Add the image attributes to the nodes' extra attribute fields
global proc addNodeImageAttrs(string $nodeName){
  //Add image width
  string $attrName = "width";
  int $imageWidth =`optionMenuGrp -query -select menuImageWidthSelect`-1;
  if (!`attributeExists $attrName $nodeName`) {
    addAttr -ln $attrName -at "enum" -en "64:128:256:512:1024:1536:2048:3072:4096:8196:" $nodeName;
    setAttr -e-channelBox true ($nodeName+"."+$attrName);
    setAttr ($nodeName+"."+$attrName) $imageWidth;
    print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
  }
  
  //Add image width
  string $attrName = "height";
  int $imageHeight =`optionMenuGrp -query -select menuImageHeightSelect`-1;
  if (!`attributeExists $attrName $nodeName`) {
    addAttr -ln $attrName -at "enum" -en "(auto):64:128:256:512:1024:1536:2048:3072:4096:8196:" $nodeName;
    setAttr -e-channelBox true ($nodeName+"."+$attrName);
    setAttr ($nodeName+"."+$attrName) $imageHeight;
    print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
  }

  //Add texture format 
  string $attrName ="textureFormat";
  int $textureFormat =`optionMenuGrp -query -select menuTextureFormat`-1;
  if (!`attributeExists $attrName $nodeName`) {
    addAttr -ln $attrName -at "enum" -en "Maya File Texture:Mental Ray Texture:Skip Node Creation:Update Existing Node:" $nodeName;
    setAttr -e-channelBox true ($nodeName+"."+$attrName);
    setAttr ($nodeName+"."+$attrName) $textureFormat;
    print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
  }
  
 
  // //Add surface node
  // string $attrName ="surfaceNode";
  // int $surfaceMaterialFormat =`optionMenuGrp -query -select menuSurfaceMaterialFormat`-1;
  // if (!`attributeExists $attrName $nodeName`) {
    // addAttr -ln $attrName -at "enum" -en "None:Surface Shader:Lambert:Mia_material_x_passes:" $nodeName;
    // setAttr -e-channelBox true ($nodeName+"."+$attrName);
    // setAttr ($nodeName+"."+$attrName) $surfaceMaterialFormat;
    // print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
  // }
  
  //Add supporting shape 
  string $attrName ="shapeFormat";
  int $shapeFormat =`optionMenuGrp -query -select menuShapeFormat`-1;
  if (!`attributeExists $attrName $nodeName`) {
    addAttr -ln $attrName -at "enum" -en "None:Plane:Cylinder:Dome:" $nodeName;
    setAttr -e-channelBox true ($nodeName+"."+$attrName);
    setAttr ($nodeName+"."+$attrName) $shapeFormat;
    print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
  }
  
  //Add the shape orientation axis
  string $attrName = "orientationAxis";
  int $planeDirection =`optionMenuGrp -query -select menuDomeOrientationAxis`-1;
  if (!`attributeExists $attrName $nodeName`) {
    addAttr -ln $attrName -at "enum" -en "Right (X):Top (Y):Front (Z):" $nodeName;
    setAttr -e-channelBox true ($nodeName+"."+$attrName);
    setAttr ($nodeName+"."+$attrName) $planeDirection;
    print("Adding custom attribute " + $nodeName +"." +$attrName + "\n");
  }
  
}


//Create a dome text Maya file node with a specified image name and default background color
//example:
//createDomeFileNode("sourceimages/bob.png", {0.0, 1.0, 0.0});
global proc string createDomeFileNode(string $imagePath, float $bgColor[] ){
  print("Image Path: " + $imagePath + "\n");
  print("Background color: [" + $bgColor[0] + ", " + $bgColor[1] + ", "+ $bgColor[2]+ "]\n");

  //string $domePlace2dNode = "place2dTexture1";
  //string $domeTextFileNode = "file1";

  string $domeTextFileNode = `shadingNode -asTexture file -name "domeTextFileNode"`;
  string $domePlace2dNode = `shadingNode -asUtility place2dTexture -name "domeTextPlace2dTexture"`;

  //float $bgColor[3] = {0.0, 1.0, 0.0};
  //string $imagePath = "sourceimages/bob.png";

  //Connect the place2D texture node to the Maya Dome Text file texture node
  connectAttr -f ($domePlace2dNode+".coverage") ($domeTextFileNode+".coverage");
  connectAttr -f ($domePlace2dNode+".translateFrame") ($domeTextFileNode+".translateFrame");
  connectAttr -f ($domePlace2dNode+".rotateFrame") ($domeTextFileNode+".rotateFrame");
  connectAttr -f ($domePlace2dNode+".mirrorU") ($domeTextFileNode+".mirrorU");
  connectAttr -f ($domePlace2dNode+".mirrorV") ($domeTextFileNode+".mirrorV");
  connectAttr -f ($domePlace2dNode+".stagger") ($domeTextFileNode+".stagger");
  connectAttr -f ($domePlace2dNode+".wrapU") ($domeTextFileNode+".wrapU");
  connectAttr -f ($domePlace2dNode+".wrapV") ($domeTextFileNode+".wrapV");
  connectAttr -f ($domePlace2dNode+".repeatUV") ($domeTextFileNode+".repeatUV");
  connectAttr -f ($domePlace2dNode+".offset") ($domeTextFileNode+".offset");
  connectAttr -f ($domePlace2dNode+".rotateUV") ($domeTextFileNode+".rotateUV");
  connectAttr -f ($domePlace2dNode+".noiseUV") ($domeTextFileNode+".noiseUV");
  connectAttr -f ($domePlace2dNode+".vertexUvOne") ($domeTextFileNode+".vertexUvOne");
  connectAttr -f ($domePlace2dNode+".vertexUvTwo") ($domeTextFileNode+".vertexUvTwo");
  connectAttr -f ($domePlace2dNode+".vertexUvThree") ($domeTextFileNode+".vertexUvThree");
  connectAttr -f ($domePlace2dNode+".vertexCameraOne") ($domeTextFileNode+".vertexCameraOne");
  connectAttr -f ($domePlace2dNode+".outUV") ($domeTextFileNode+".uvCoord");
  connectAttr -f ($domePlace2dNode+".outUvFilterSize") ($domeTextFileNode+".uvFilterSize");

  //Set the default background color
  //setAttr ($domeTextFileNode+".defaultColor") -type double3 0.0 1.0 0.0 ;
  setAttr ($domeTextFileNode+".defaultColor") -type double3 $bgColor[0] $bgColor[1] $bgColor[2] ;

  //Attach the PNG file texture to the file node
  //setAttr -type "string" ($domeTextFileNode+".fileTextureName") "sourceimages/bob.png";
  setAttr -type "string" ($domeTextFileNode+".fileTextureName") $imagePath;

  //Add the Dome Text version to the node
  addDomeTextVersionAttrs($domeTextFileNode);
  
  //Add fg and bg color swatches to the node
  addNodeColorAttrs($domeTextFileNode);
  
  //Add the font name to the file node
  addNodeFontAttrs($domeTextFileNode);
  
  //Add the image attributes to the file node
  addNodeImageAttrs($domeTextFileNode);
  
  //Create a default surfaceShader material
  string $domeTextMatNode = `shadingNode  -name "dometext_material" -asShader surfaceShader`;
  
  // Connect the Maya file texture to the surface shader preview material 
  connectAttr -force ($domeTextFileNode+".outColor") ($domeTextMatNode+".outColor");
  
  //Connect the Maya file texture transparency to the surface shader
  connectAttr -f ($domeTextFileNode+".outTransparency") ($domeTextMatNode+".outTransparency");
  
  //Create the shading group node and connect it to the surface shader
  string $domeTextSGNode = `sets -renderable true -noSurfaceShader true -empty -name ($domeTextMatNode+"SG")`;
  connectAttr -f ($domeTextMatNode+".outColor") ($domeTextSGNode+".surfaceShader");
  
  // Connect the Maya file texture to the lambert incandescent material 
  //connectAttr -force ($domeTextFileNode+".outColor") (domeTextMatNode+".incandescence");
  
  //Create the supporting geometry
  string $domeGeometry = chooseDomeGeometry();
  
  int $domeShapeFormat = `optionMenuGrp -query -select menuShapeFormat`;
  
  //Check if a supporting shape was created
  if( ($domeShapeFormat > 1 ) && (`objExists $domeGeometry` )  ){
    //Apply the shading group to the selected geometry
    select $domeGeometry;
    hyperShade -assign $domeTextSGNode;
  }else {
    print("Shading group assignment skipped\n");
  }
   
  return $domeTextFileNode;
}


//Create a dome text mental ray texture file node with a specified image name
//example:
//createDomeMrFileNode("sourceimages/bob.png", {0.0, 1.0, 0.0});
global proc string createDomeMrFileNode(string $imagePath, float $bgColor[] ){
  print("Image Path: " + $imagePath + "\n");
  print("Background color: [" + $bgColor[0] + ", " + $bgColor[1] + ", "+ $bgColor[2]+ "]\n");

  //string $domePlace2dNode = "place2dTexture1";
  //string $domeTextFileNode = "file1";

  string $domeText_tex_vector = `shadingNode -asUtility "mib_texture_vector" -name "domeText_mib_texture_vector1"`;
  string $domeText_tex_remap = `shadingNode -asUtility "mib_texture_remap" -name "domeText_mib_texture_remap1"`;
  string $domeText_tex_lookup= `shadingNode -asUtility "mib_texture_lookup" -name "domeText_mib_texture_lookup1"`;
  string $domeText_mr_tex = `shadingNode -asTexture "mentalrayTexture" -name "domeText_mentalrayTexture1"`; 
  
  string $domeTextMatNode = `shadingNode  -name "dometext_material" -asShader mia_material_x_passes`;

  //float $bgColor[3] = {0.0, 1.0, 0.0};
  //string $imagePath = "sourceimages/bob.png";

  //Connect the color texture nodes
  connectAttr -f ($domeText_tex_vector+".outValue")  ($domeText_tex_remap+".input");
  // mib_texture_vector.outValue -> mib_texture_remap.input

  connectAttr -f ($domeText_tex_remap+".outValue") ($domeText_tex_lookup+".coord");
  // mib_texture_remap.outValue -> mib_texture_lookup.coord

  connectAttr -f  ($domeText_mr_tex+".message")  ($domeText_tex_lookup+".tex");
  // mentalrayTexture.message -> mib_texture_lookup.tex

  //Set the default background color
  //setAttr ($domeTextFileNode+".defaultColor") -type double3 0.0 1.0 0.0 ;
  //setAttr ($domeText_mr_tex+".defaultColor") -type double3 $bgColor[0] $bgColor[1] $bgColor[2] ;

  //Attach the PNG file texture to the mental ray file texture node
  //setAttr -type "string" ($domeTextFileNode+".fileTextureName") "sourceimages/bob.png";
  setAttr -type "string" ($domeText_mr_tex+".fileTextureName") $imagePath;

  //Add the Dome Text version to the node
  addDomeTextVersionAttrs($domeText_mr_tex);
  
  //Add fg and bg color swatches to the nodes
  addNodeColorAttrs($domeText_mr_tex);
  
  //Add the font name to the file node
  addNodeFontAttrs($domeText_mr_tex);
  
  //Add the image attributes to the file node
  addNodeImageAttrs($domeText_mr_tex);
  
  //Set the mia_x_passes material to be glossy
  setAttr ($domeTextMatNode+".refl_color") -type double3 1 1 1;
  setAttr ($domeTextMatNode+".reflectivity") 0;
  setAttr ($domeTextMatNode+".refl_gloss") 0;
  setAttr ($domeTextMatNode+".diffuse_roughness") 0;
  setAttr ($domeTextMatNode+".diffuse_weight") 1;
  setAttr ($domeTextMatNode+".diffuse") -type double3 0 0 0;
  
  //Create the shading group node
  string $domeTextSGNode = `sets -renderable true -noSurfaceShader true -empty -name ($domeTextMatNode+"SG")`;
  
  //Attach the texture lookup node to the mia_x_passes material
  connectAttr -f ($domeText_tex_lookup+".outValue") ($domeTextMatNode+".additional_color");
  connectAttr -f ($domeText_tex_lookup+".outValueA") ($domeTextMatNode+".additional_colorA");
  
  //Attach the texture lookup node to the mia_x_passes material
  connectAttr -f ($domeText_tex_lookup+".outValue") ($domeTextMatNode+".diffuse");
  connectAttr -f ($domeText_tex_lookup+".outValueA") ($domeTextMatNode+".diffuseA");
  
  //Attach the mia_x_passes material to the shading group
  connectAttr -f ($domeTextMatNode+".message") ($domeTextSGNode+".miMaterialShader");
  connectAttr -f ($domeTextMatNode+".message") ($domeTextSGNode+".miPhotonShader");
  connectAttr -f ($domeTextMatNode+".message") ($domeTextSGNode+".miShadowShader");
  
  //Make the surface transparent using the cut-out opacity option
  //int $isbackgroundTransparent = `checkBox -query -value checkTransparentBackground`;
  //if ($isbackgroundTransparent){
  //connectAttr -f ($domeText_tex_lookup+".outValueA") ($domeTextMatNode+".cutout_opacity");
  //}
  
  //Create the supporting geometry
  string $domeGeometry = chooseDomeGeometry();
  int $domeShapeFormat = `optionMenuGrp -query -select menuShapeFormat`;
  
  //Check if a supporting shape was created
  if( ($domeShapeFormat > 1 ) && (`objExists $domeGeometry` )  ){
    //Apply the shading group to the selected geometry
    select $domeGeometry;
    hyperShade -assign $domeTextSGNode;
  }else {
    print("Shading group assignment skipped\n");
  }

  return $domeText_mr_tex;
}


//Toggle the surface material, and shape option menus
global proc disableSurfaceAndShape(){
  if( (`optionMenuGrp -query -select menuTextureFormat`) >=3 ){
    //Disable the selection of the menu items
    //optionMenuGrp -edit -enable false menuSurfaceMaterialFormat;
    optionMenuGrp -edit -enable false menuShapeFormat;
    
    //Reset the menus to the first item in the list
    //optionMenuGrp -edit -select 1 menuSurfaceMaterialFormat;
    //optionMenuGrp -edit -select 1 menuShapeFormat;
  }else{
    //Enable the selection of the menu items
    //optionMenuGrp -edit -enable true menuSurfaceMaterialFormat;
    optionMenuGrp -edit -enable true menuShapeFormat;
    
    //Reset the menus to the defaults
    //optionMenuGrp -edit -select 2 menuSurfaceMaterialFormat;
  }
}


//Toggle the shape option menus
global proc disableShape(){
  //if( 1>=(`optionMenuGrp -query -select menuSurfaceMaterialFormat`) ){
    //Disable the selection of the menu items
  //  optionMenuGrp -edit -enable false menuShapeFormat;
    //Reset the menus to the first item in the list
    // //optionMenuGrp -edit -select 1 menuShapeFormat;
  //}else{
    //Enable the selection of the menu items
    optionMenuGrp -edit -enable true menuShapeFormat;
 // }
}


global proc string getDomeImagePath(){
  //Read the current "sourceimages" directory from the workspace (set project) settings
  string $defaultSourceImages;
  
  // Check if we are running Maya 2011 or higher
  float $mayaVersion = getMayaVersion();
  
  //File dialog results path
  string $resultArray[];
  string $result;
  
  //Listed file types
  string $basicFilter = "*.png";
  
  string $advancedFilter = "Images( *.png *.tif *.tga *.bmp *.psd);;PNG (*.png);;Targa (*.tga);;Tiff (*.tif);;Windows Bitmap (*.bmp);;All Files (*.*)";
  
  //Check if  you are running Maya 2011 or newer and then show the fileDialog2 file picker
  if ($mayaVersion >=2011){
    //Maya 2011+ 
    //List directories with starting location and a open button
    
    // $defaultSourceImages  = `workspace -expandName "sourceimages"`;
    $defaultSourceImages =`textFieldButtonGrp -query -text textImageOutputName`;

    $resultArray  = `fileDialog2 
    -fileMode 0 
    -startingDirectory $defaultSourceImages
    -fileFilter $advancedFilter
    -okCaption "Select"
    -cancelCaption "Cancel"
    -caption "Select an Image Path"
    -dialogStyle 2`;
    
    print("Using the FileDialog2 image picker.\n");
    
    $result = $resultArray[0];
  }else{
    //Check if  you are running Maya 2010 or older and then show the classic fileDialog file picker
    $defaultSourceImages  = `workspace -expandName "sourceimages"` + "/" + $basicFilter;
    
    //Maya 2010 or lower
    // list directories with starting location and a open button
   $result = `fileDialog 
    -mode 1 
    -directoryMask $defaultSourceImages
    -title "Select an Image Path"`;
    
  print("Using the FileDialog image picker.\n");
  }

  return $result;
}


//Rebuild the Text Preset option menu
global proc buildTextPresetMenu(){
  if(`optionMenuGrp -exists menuTextPresetSelect`){
    //print("Removing the existing Text Preset menu.\n");
    deleteUI menuTextPresetSelect;
  } else {
    //print("Create the Text Preset menu.\n");
  }

  // Create the Text Preset Pop-up Menu  
  optionMenuGrp
    -label "Copy Node Settings"
    -columnAlign 1 "right"
    -changeCommand "string $NodeName =`optionMenuGrp -query -value menuTextPresetSelect`;restoreDomeTextPreset($NodeName);"
    -annotation "Load the settings from an existing Dome Text file texture node back into the Dome Text window."
    -parent textPresetLayout
     menuTextPresetSelect;

  menuItem -label "Select a DomeText Node...";
  // menuItem -label "file1";
  // menuItem -label "file2";
  // menuItem -label "mentalrayTexture1";
  // menuItem -label "mentalrayTexture2";
 
  //List all of the texture nodes
  string $fileNodeList[] = `lsType("file")`;
  string $mrFileNodeList[] = `lsType("mentalrayTexture")`;
  string $textureNodeItems = "";
  
  //Sort the texture node names alphabetically
  $fileNodeList = sort($fileNodeList);
  $mrFileNodeList = sort($mrFileNodeList);
  
  //print ("Nodes:\n");
  //print ($fileNodeList);
  //print ($mrFileNodeList);
    
  int $i = 0; //track the total number of maya + mr texture nodes
  
  //Scan Maya File Texture Nodes
  for ( $textureNodeItems in $fileNodeList )
  {
     // Look for the last item <done> in the array
     if ( ($textureNodeItems != "<done>") && (isDomeTextNode($textureNodeItems))  ){
       //print ( "Maya Texture[" + $i + "] " + $textureNodeItems + "\n");
       menuItem -label $textureNodeItems;
     }
     $i = $i+1;
  }

  //menuItem -divider true;
  
  //Scan Mental Ray File Texture Nodes
  for ( $textureNodeItems in $mrFileNodeList )
  {
     // Look for the last item <done> in the array
     if ( ($textureNodeItems != "<done>") && (isDomeTextNode($textureNodeItems))  ){
       //print ( "MR Texture[" + $i + "] " + $textureNodeItems + "\n");
       menuItem -label $textureNodeItems;
     }
     $i = $i+1;
  }
  
  optionMenuGrp 
    -edit
    -select 1
    menuTextPresetSelect;
}


//Reload an old DomeText message from the selected texture node
 global proc restoreDomeTextPreset( string $nodeName ){
 
  //Skip processing the popup menu caption text
  if($nodeName == "Select a DomeText Node...") return;

  //Make sure the node exists before working with it
  if(`objExists $nodeName`){
    print("Restoring editable DomeText from: " + $nodeName + "\n");
    
    //Find out if the current node is a maya or mental ray texture
    string $textureNodeType = `nodeType($nodeName)`;
    if( $textureNodeType == "file"){
      //Maya file texture
      optionMenuGrp -edit -select 1 menuTextureFormat;
    } else if ($textureNodeType == "mentalrayTexture"){
      //Mental Ray File Texture
      optionMenuGrp -edit -select 2 menuTextureFormat;
    }
    
    //Restore the note message
    if (`attributeExists "nts" $nodeName`) {
      print "The note attribute exists.\n";
      //Read the textual note from the texture node
      //string $domeTextString = getAttr "file1.nts";
      string $domeTextString = getAttr ($nodeName+".nts");
      //Write the value back to the Dome Text window's text field
      scrollField -edit -text $domeTextString scrollTextString;
      print("Note: " +  $domeTextString + "\n");
    } else {
      print "The note attribute does not exist.\n";
    } //end check if nts attr exists
    
    //Restore the file name field
    string $currentFileName = getAttr ($nodeName+".fileTextureName");
    textFieldButtonGrp -edit -text $currentFileName textImageOutputName;
    
   //Restore Imagemagick custom text field
    if (`attributeExists "imagemagickCustomText" $nodeName`){
      print "The imagemagickCustomText attribute exists.\n";
      string $imagemagickCustomText = getAttr ($nodeName+".imagemagickCustomText");
      scrollField -edit -text $imagemagickCustomText scrollImagemagickCustomText;
    } else {
      print "The imagemagickCustomText attribute does not exist.\n";
    } //end check if imagemagickCustomText attr exists
    
    //Restore foreground and background color swatches
    if (`attributeExists "foregroundColor" $nodeName` && `attributeExists "backgroundColor" $nodeName`) {
      print "The FG & BG color attributes exist.\n";
      //Restore the color swatches from the node's extra attributes
      float $foregroundRGBcolor[3] = `getAttr ($nodeName+".foregroundColor")`;
      float $backgroundRGBcolor[3] = `getAttr ($nodeName+".backgroundColor")`; 
      colorSliderGrp -edit -rgb $foregroundRGBcolor[0] $foregroundRGBcolor[1] $foregroundRGBcolor[2] sliderForeColor;
      colorSliderGrp -edit -rgb $backgroundRGBcolor[0] $backgroundRGBcolor[1] $backgroundRGBcolor[2] sliderBackColor;
    } else {
      print "The FG & BG color attributes do not exist.\n";
    } //end check if fg & bg attr exists
    
    //Restore the background transparent checkbox
    if (`attributeExists "isBgTransparent" $nodeName`){
      print "The background transparency attribute exists.\n";
      int $isbackgroundTransparent = getAttr ($nodeName+".isBgTransparent");
      checkBox -edit -value $isbackgroundTransparent checkTransparentBackground;
    } else {
      print "The background transparency attribute does not exist.\n";
    } //end check if background transparency attr exists
    
     //Restore the font name
     if (`attributeExists "font" $nodeName`){
      print "The font name attribute exists.\n";
      string $fontName = getAttr ($nodeName+".font");
      optionMenuGrp -edit -value $fontName menuFontNameSelect;
    } else {
      print "The font name attribute does not exist.\n";
    } //end check if font name attr exists
    
     //Restore the font style
     if (`attributeExists "fontStyle" $nodeName`){
      print "The font style attribute exists.\n";
      int $fontStyle = 1+ getAttr ($nodeName+".fontStyle");
      optionMenuGrp -edit -select $fontStyle menuFontWeightSelect;
    } else {
      print "The font style attribute does not exist.\n";
    } //end check if font style attr exists
    
     //Restore the font alignment
     if (`attributeExists "alignment" $nodeName`){
      print "The alignment attribute exists.\n";
      int $fontAlign = 1+ getAttr ($nodeName+".alignment");
      optionMenuGrp -edit -select $fontAlign menuFontAlignSelect;
    } else {
      print "The alignment attribute does not exist.\n";
    } //end check if alignment attr exists
       
    //Restore the font size
    if (`attributeExists "fontSize" $nodeName`){
      print "The font size attribute exists.\n";
      int $fontSize = getAttr ($nodeName+".fontSize");
      intSliderGrp -edit -value $fontSize sliderPointSize;
    } else {
      print "The font size attribute does not exist.\n";
    } //end check if font size attr exists
    
    //Restore the kerning size
    if (`attributeExists "kerningSize" $nodeName`){
      print "The kerningSize attribute exists.\n";
      float $kerningSize = getAttr ($nodeName+".kerningSize");
      floatSliderGrp -edit -value $kerningSize sliderKerningSize;
    } else {
      print "The kerningSize attribute does not exist.\n";
    } //end check if kerningSize attr exists
       
    //Restore the image size
    if (`attributeExists "width" $nodeName`){
      print "The image width attribute exists.\n";
      int $imageWidth = 1+ getAttr ($nodeName+".width");
      optionMenuGrp -edit -select $imageWidth menuImageWidthSelect;
    } else {
      print "The image width attribute does not exist.\n";
    } //end check if image width attr exists
       
    if (`attributeExists "height" $nodeName`){
      print "The image height attribute exists.\n";
      //Restore the image height state
      int $imageheight = 1+ getAttr ($nodeName+".height");
      optionMenuGrp -edit -select $imageheight menuImageHeightSelect;
    } else {
      print "The image height attribute does not exist.\n";
    } //end check if image height attr exists   
    
    //Restore the texture format settings
    if (`attributeExists "textureFormat" $nodeName`){
      print "The texture format attribute exists.\n";
      int $textureFormat = 1+ getAttr ($nodeName+".textureFormat");
      optionMenuGrp -edit -select $textureFormat menuTextureFormat;
    } else {
      print "The texture format attribute does not exist.\n";
    } //end check if texture format attr exists
    
    // //Restore the surface node settings
    // if (`attributeExists "surfaceNode" $nodeName`){
      // print "The surface node attribute exists.\n";
      // int $surfaceMaterialFormat = 1+ getAttr ($nodeName+".surfaceNode");
      // optionMenuGrp -edit -select $surfaceMaterialFormat menuSurfaceMaterialFormat;
    // } else {
      // print "The surface node attribute does not exist.\n";
    // } //end check if surface node attr exists
       
    //Restore the supporting shape settings
    if (`attributeExists "shapeFormat" $nodeName`){
      print "The supporting shape attribute exists.\n";
      int $shapeFormat = 1+ getAttr ($nodeName+".shapeFormat");
      optionMenuGrp -edit -select $shapeFormat menuShapeFormat;
    } else {
      print "The supporting shape attribute does not exist.\n";
    } //end check if the supporting shape attr exists  
    
    //Restore the orientationAxis settings
    if (`attributeExists "orientationAxis" $nodeName`){
      print "The orientationAxis attribute exists.\n";
      int $planeDirection = 1+ getAttr ($nodeName+".orientationAxis");
      optionMenuGrp -edit -select $planeDirection menuDomeOrientationAxis;
    } else {
      print "The orientationAxis attribute does not exist.\n";
    } //end check if the orientationAxis attr exists  
    
    
    
  } else {
    print ("Texture Node Not found");
  }  //end check if node exists
}


global proc domeText(){
  global int $domeWindowHeight = 625;
  global int $domeWindowWidth = 500;

  //-------------------------------------------------
  //Get the current Maya Platform using python
  //      The $mayaPlatform options are:
  //          "windows", "darwin", "linux"
  //-------------------------------------------------

   //Check the operating system
  string $mayaPlatform = getMayaPlatform();

  // Check if we are running Maya 2011 or higher
  float $mayaVersion = getMayaVersion();

  // Write out the current Maya version number and detected operating system
  print("Maya " + $mayaVersion + " on " + $mayaPlatform  + " detected.\n");

  if ($mayaVersion >=2011){
  // Remove an existing docked control window when running the DomeText tool for a 2nd time.
    if (`dockControl -exists domeDockControl`){ 
      deleteUI -control domeDockControl; 
      print( "Removing an existing docked Dome Text Window\n");}

  if (`window -exists domeTextWin`){
      deleteUI domeTextWin;
      windowPref -remove domeTextWin;
      print("Reloading the Dome Text window elements\n");}
  }else{
    // You are running Maya 2010 or lower - skip the dockcontrols
    // Remove an existing window when running the DomeText tool for a 2nd time.
    if (`window -exists domeTextWin`){
      deleteUI domeTextWin;
      windowPref -remove domeTextWin;
      print("Reloading the Dome Text window elements\n");}
  }

  string $domeTextWindow = `window 
    -title "Dome Text Tool" 
    //-width $domeWindowWidth
    -widthHeight $domeWindowWidth $domeWindowHeight 
    domeTextWin`; 
 
  string $domeScrollableLayout = `scrollLayout 
    -horizontalScrollBarThickness 18
    -verticalScrollBarThickness   18
    -childResizable 1
    //-width $domeWindowWidth
    `;

    columnLayout 
      //-width ($domeWindowWidth-30)
      //-width $domeWindowWidth
      -adjustableColumn true
      textPresetLayout;
      
      //Create the Text Presets Option Menu
      buildTextPresetMenu();
      
    setParent ..;
    
  frameLayout 
    -label "Text Entry"
    -collapsable true
    -collapse false
    -borderStyle "etchedIn";
    
    columnLayout 
      //-width $domeWindowWidth
      -adjustableColumn true;

      scrollField 
        -wordWrap true 
        //-width $domeWindowWidth       
        -annotation "Enter your message in the text field."
        -text "Hello Dome World!"
        
        //-text "" scrollTextString;
        //-text "Ext. Moon - Night                \n\nTwo astronauts are driving across the lunar surface on a moon buggy.\n\nMacGee\n(laughing)\nWhy do they even pay us to work?\n\nConrad\n(frankly)\nBecause ground control is scared shitless..." scrollTextString;
        //-text "Ext. Moon - Night                1\n\nTwo astronauts are driving across the lunar surface on a moon buggy.\n\nMacGee\n(laughing)\nWhy do they even pay us to work?\n\nConrad\n(frankly)\nBecause ground control is scared shitless...\n\nThe moon buggy comes to an abrupt stop infront of a large abandoned quonset hut structure. The roof shows signs of meteor damage and there is debris strew around the entrance." 

        scrollTextString;
      
    setParent ..;
  setParent ..;

  frameLayout
    -label "Font Styles"
    -collapsable true
    -collapse false
    -borderStyle "etchedIn";
    
    columnLayout
      //-width ($domeWindowWidth-30)
      //-width $domeWindowWidth
      //-adjustableColumn true
      ;
      
      // Create the Font Selector Pop-up Menu  
      optionMenuGrp
        -label "Font"
        -columnAlign 1 "right"
        -annotation 
        "Choose a font name to change the appearance of the generated text. The installed fonts \nare listed by scanning the operating system's font folder paths."
        menuFontNameSelect;

      //menuItem -label "Arial";
      //menuItem -label "Courier";
      //menuItem -label "Helvetica";
      //menuItem -label "Times";
     
      //Scan the system for installed fonts
      string $fontFolderPath;
      string $installedFonts[];
              
      if ($mayaPlatform  == "windows"){
        //Windows 32/x64
        // Font Folders: C:/Windows/Fonts/
        
        $fontFolderPath = "C:\\Windows\\Fonts\\";     
        $installedFonts = `getFileList -folder $fontFolderPath`;
        
      }else if ($mayaPlatform  == "darwin"){
        //Mac OS X
        //Font Folders: /System/Library/Fonts/:/Library/Fonts/:~/Library/Fonts/";


        $fontFolderPath = "/Library/Fonts/";
        string $fontFolderPath2 = "/System/Library/Fonts/";
        string $fontFolderPath3 = "~/Library/Fonts/";
        
        string $fontTemp1[] = `getFileList -folder $fontFolderPath`;
        string $fontTemp2[] = `getFileList -folder $fontFolderPath2`;
        string $fontTemp3[] = `getFileList -folder $fontFolderPath3`;
        
        $installedFonts = stringArrayCatenate($fontTemp1, $fontTemp2);
        $installedFonts = stringArrayCatenate($installedFonts, $fontTemp3);
        
      }else {  
        //Linux
        //Font Folders: /usr/share/fonts/

        $fontFolderPath = "/usr/share/fonts/";
        $installedFonts = `getFileList -folder $fontFolderPath`;
        
      }
      
      //print("Installed Fonts: \n");
      //print $installedFonts;
      //print("End of the installed fonts list\n");

      int $i_count = 0; //track the total number of included fonts
      string $installedFontsItems;
      
      //Scan the font array list
      for ( $installedFontsItems in $installedFonts )
      {
        menuItem -label $installedFontsItems;
        $i_count = $i_count+1;  
      }
      
      //optionMenuGrp -edit
      //  -select 1
      // menuFontNameSelect;
      
      //Preselect Arial in font name options menu 
      string $fontFilenameString = "";
      string $defaultfontName = "";
      
      if ($mayaPlatform  == "windows"){
        //Windows 32/x64
        $defaultfontName = "arial.ttf";
      }else if ($mayaPlatform  == "darwin"){
        //Mac OS X
        $defaultfontName = "arial.ttf";
      }else {  
        //Linux
        $defaultfontName = "arial.ttf";
      }
        
      $fontFilenameString = $fontFolderPath + $defaultfontName;
      
      //Check if the font exists
      if (`filetest -f $fontFilenameString`){
        print("Setting " + $fontFilenameString + " as the default font.\n");
        optionMenuGrp -edit -value $defaultfontName menuFontNameSelect;
      }else{
        print("The default font " + $fontFilenameString + " does not exist.\n");
      } 
      
      // Create the Font Style Selector Pop-up Menu  
      // Font Style options: ALL, Bold, Bolder, Lighter, Normal
      optionMenuGrp
        -label "Font Style"
        -columnAlign 1 "right"
        -annotation "The \"Font Style\" controls can make a font appear thicker, or thinner."
        menuFontWeightSelect;

      menuItem -label "ALL";
      menuItem -label "Bold";
      menuItem -label "Bolder";
      menuItem -label "Lighter";
      menuItem -label "Normal";

      //Preselect the "ALL" pop-up menu option
      optionMenuGrp 
        -edit
        -select 1
        menuFontWeightSelect;

      optionMenuGrp
        -label "Alignment"
        -columnAlign 1 "right"
        -annotation "\"Alignment\" controls the position of the text in the image using a compass direction. \nCenter alignment will place the text in the middle of the image. North places the text at \nthe top of the image, and South places the text at the bottom. If you change the image \nheight from (auto) to a specific size you will notice the vertical alignment controls have \nmore effect."
        menuFontAlignSelect;
    
      menuItem -label "NorthWest";
      menuItem -label "North";
      menuItem -label "NorthEast";
      menuItem -label "West";
      menuItem -label "Center"; 
      menuItem -label "East";
      menuItem -label "SouthWest";
      menuItem -label "South";
      menuItem -label "SouthEast";

      optionMenuGrp 
        -edit
        -select 5
        menuFontAlignSelect;
  
      intSliderGrp 
        -label "Font Size" 
        //-extraLabel "Points" 
        //-columnWidth 2 90
        -field true
        -minValue 6 -maxValue 2048
        -fieldMinValue 6 -fieldMaxValue 2048
        -value 96 
        -annotation "Choose a font size in points. In digital typography 72 points = 1 inch."
        sliderPointSize;
          
      floatSliderGrp 
        -label "Kerning" 
        //-extraLabel "Points" 
        //-columnWidth 2 90
        -field true
        -minValue -1024 -maxValue 2048
        -fieldMinValue -1024  -fieldMaxValue 2048
        -value 0
        -annotation "Choose a kerning value in points. In digital typography 72 points = 1 inch."
        sliderKerningSize;
        
      setParent ..;
    setParent ..;
  setParent ..;

  frameLayout 
    -label "Color Styles"
    -collapsable true
    -collapse false
    -borderStyle "etchedIn";
    
  columnLayout 
    //-width $domeWindowWidth
    -adjustableColumn true ;

    //Color Pickers
    //To convert from a 0-255 to 0-1 Color = value*0.003921568627451

    colorSliderGrp 
      -label "Foreground Color" 
      -rgb 0.968 0.76 0.07 
      -annotation "Choose a foreground color for the Dome Text."
      sliderForeColor;

    colorSliderGrp 
      -label "Background Color" 
      -rgb 0.0 0.0 0.0 
      -annotation "Choose a background color for the Dome Text."
      sliderBackColor;

    checkBox 
      -label "Transparent Background"  
      -value 1
      -annotation "Render the foreground Dome Text over a transparent background."
      checkTransparentBackground;

    setParent ..;
  setParent ..;

  frameLayout 
    -label "Image Controls"
    -collapsable true
    -collapse false
    -borderStyle "etchedIn";
    
    columnLayout 
      //-width $domeWindowWidth
      -adjustableColumn true;

      //Check the platform to come up with the correct source images folder

      //Read the current "sourceimages" directory from the workspace (set project) settings
      string $defaultSourceImages = `workspace -expandName "sourceimages"`;
      
      //The image name without a leading slash
      string $imageFilename = "text_string.png";

      //The path to the image directory with a trailing slash
      string $imageFilePath = "";

      if ($mayaPlatform  == "windows"){
        //Windows 32/x64
        //$imageFilePath = "%USERPROFILE%\\My Documents\\maya\\projects\\default\\sourceimages\\"+ $imageFilename;
        //$imageFilePath = "C:\\"+ $imageFilename;
        $imageFilePath = $defaultSourceImages + "/" + $imageFilename;
      }else if ($mayaPlatform  == "darwin"){
        //Mac OS X
        //$imageFilePath = "~/Documents/maya/projects/default/sourceimages/" + $imageFilename;
        $imageFilePath = $defaultSourceImages + "/" + $imageFilename;
      }else {  
        //Linux
        //$imageFilePath = "~/Documents/maya/projects/default/sourceimages/" + $imageFilename;
        $imageFilePath = $defaultSourceImages + "/" + $imageFilename;
      }
     
      textFieldButtonGrp
        -adjustableColumn 2
        //-columnWidth 2 150
        -label "Save Image As"
        -text $imageFilePath
        -buttonLabel " ... "
        //-changeCommand  ""
        -buttonCommand "string $tempPath = getDomeImagePath(); textFieldGrp -edit -text $tempPath textImageOutputName;"
        -annotation "Choose the file name and destination folder for the Dome Text generated image. You can create an image in the \nPNG, TIFF, TGA, BMP and PSD image formats based upon the file extension you enter. By clicking on the button \nlabeled \"...\" you can choose an existing file on your hard drive."
        textImageOutputName;

      // Create the image width option menu  
      // options: 64, 128, 256, 512, 1024, 1536, 2048, 3072, 4096
      optionMenuGrp
        -label "Image Width" -extraLabel "Pixels" 
        -columnWidth 2 70 
        -annotation "This controls the horizontal resolution of the Dome Text image. The width is defined in pixels."
        menuImageWidthSelect;
        
      menuItem -label "64";
      menuItem -label "128";
      menuItem -label "256";
      menuItem -label "512";
      menuItem -label "1024";
      menuItem -label "1536";
      menuItem -label "2048";
      menuItem -label "3072";
      menuItem -label "4096";
      menuItem -label "8192";

      //Preselect the "1024" option menu
      optionMenuGrp
        -edit
        -select 5
        menuImageWidthSelect;
        
      // Create the image height option menu    
      optionMenuGrp
        -label "Image Height" -extraLabel "Pixels" 
        -columnWidth 2 70 
        -annotation "This controls the vertical resolution of the Dome Text image. The height is defined in pixels."
        menuImageHeightSelect;
        
      menuItem -label "(auto)";
      menuItem -label "64";
      menuItem -label "128";
      menuItem -label "256";
      menuItem -label "512";
      menuItem -label "1024";
      menuItem -label "1536";
      menuItem -label "2048";
      menuItem -label "3072";
      menuItem -label "4096";
      menuItem -label "8192";

      //Preselect the "(auto)" option menu
      optionMenuGrp 
        -edit
        -select 6
        menuImageHeightSelect;

    setParent ..;
  setParent ..; 

  frameLayout 
      -label "Texture Nodes and Shape Controls"
      -collapsable true
      -collapse false
      -borderStyle "etchedIn";
      
    columnLayout 
      //-width ($domeWindowWidth-30)
      //-width $domeWindowWidth
      -adjustableColumn true
      TextureControlsLayout;
      
    optionMenuGrp
      -label "Texture Node" 
      // "Maya File Texture" "mentalrayTexture" "Skip Node Creation" "Update Existing Node"
     -annotation "The \"Texture Node\" options allows you to choose between a classic \nMaya Software style file texture node, a native Mental Ray Texture node, \nskip the creation of a new texture node, or update an existing node."
      //Toggle the surface node, and shape node option menus
      -changeCommand "disableSurfaceAndShape();"
      menuTextureFormat;
      
    menuItem -label "Maya File Texture";
    menuItem -label "Mental Ray Texture";
    menuItem -label "Skip Node Creation";
    menuItem -label "Update Existing Node" -enable false;
      
     //Preselect the "Maya File Texture" option menu
    optionMenuGrp 
      -edit
      -select 1
      menuTextureFormat;
    
    /*
    
    optionMenuGrp
      -label "Surface Node" 
      // "None" "Surface Shader" "Lambert" "Mia_material_x_passes"
      -annotation "The \"Surface Node\" option allows you to choose the base surface material used for the Dome Text shading network."
      //Toggle the shape node option menus
      -changeCommand "disableShape();"
      menuSurfaceMaterialFormat;
    
    menuItem -label "None";
    menuItem -label "Surface Shader";
    menuItem -label "Lambert";
    menuItem -label "Mia_material_x_passes";
    
      //Preselect the "Surface Shader" option menu
    optionMenuGrp
      -edit
      -select 2
      menuSurfaceMaterialFormat;
    */
    
    setParent ..;
     
  columnLayout 
    //-width ($domeWindowWidth-30)
    //-width $domeWindowWidth
    -adjustableColumn true
    ShapeControlsLayout;  
     
    optionMenuGrp 
      -label "Supporting Shape" 
      // "None" "Rectangle" "Cylinder" "Dome"
      -annotation "The \"Supporting Shape\" options allows you to choose the base geometry that the Dome Text material is applied to."
      menuShapeFormat;
      
      menuItem -label "None";
      menuItem -label "Plane";
      menuItem -label "Cylinder" -enable false;
      menuItem -label "Dome" -enable false;
      
    //Preselect the "Plane" option menu
    optionMenuGrp -edit
      -select 2
      menuShapeFormat;
      
    optionMenuGrp
      -label "Orientation Axis" 
      // Creation Axis: Right (X):Top (Y): Front (Z)
     -annotation "Choose which view to use when placing the supporting surface."
      //Toggle the surface node, and shape node option menus
      -changeCommand "disableSurfaceAndShape();"
      menuDomeOrientationAxis;
      
    menuItem -label "Right (X)";
    menuItem -label "Top (Y)";
    menuItem -label "Front (Z)";
      
     //Preselect the right (x) option menu
    optionMenuGrp 
      -edit
      -select 3
      menuDomeOrientationAxis;
      
    floatSliderGrp 
        -label "Polygon Plane Height" 
        -field true
        -minValue 0.1 -maxValue 1000
        -fieldMinValue 0  -fieldMaxValue 1000
        -value 10
        -annotation 
        "The height of the polygon plane in scene units. Note: The width \nis automatically set based upon the image aspect ratio."
        sliderPolyPlaneSize;  
      
    setParent ..;
  setParent ..;
  
  frameLayout 
    -label "Custom ImageMagick Text Options"
    -collapsable true
    -collapse true
    -borderStyle "etchedIn";
  
    //columnLayout 
     // -adjustableColumn true;
      
      rowLayout 
        -numberOfColumns 2
        -adjustableColumn 1
        -columnWidth2 340 50
        -columnAlign2 "left" "center";
      
      scrollField
        -wordWrap true 
        //-width $domeWindowWidth
        -height 60
        -text ""
        -numberOfLines 3
        -annotation "Enter your custom Imagemagick command line options."
        scrollImagemagickCustomText; 
      
      iconTextButton 
        //-style "iconAndTextHorizontal"
        -style "iconAndTextVertical"
        -image1 "imagemagick.png" 
        -label "Imagemagick Help"
        -align "center"
        -annotation "Load the Imagemagick command line help webpage."
        -command "showHelp -absolute \"http://www.imagemagick.org/script/convert.php\";" 
        buttonImagemagickHelp;
      
    setParent ..;
  setParent ..;
      
  columnLayout 
    //-width $domeWindowWidth
    -adjustableColumn true ;

    button 
      -label "Create Text"
      -annotation "Create a new Dome Text based raster image."
      -command "createDomeText()"; 
      
    //button -label "Close"
    //  -command "deleteUI domeTextWin;";
    setParent ..;
    
  columnLayout 
    //-width ($domeWindowWidth-30)
    //-width $domeWindowWidth
    -adjustableColumn true
    LoadViewlayout;
      
    button
      -label "Load Image in Render View"
      -annotation 
      "This button loads the current image that is listed in the \"Save Image As\" text field in the Render View \nwindow. The image is auto sized to fit the window size. You can view the image at the native resolution \nby pressing the 1:1 button in the Render View. You can also view the alpha channel in the render view."
      -command "loadInRenderView()"; 
      
  setParent ..;
  
  //----------------------------------------------------------------------
  //Show the Dome Text window
  //On Maya 2011 and higher provide access to the dockable UI 
  //----------------------------------------------------------------------

  if ( $mayaVersion == 2011 ){
  //Make the Maya 2011 or higher window dockable
  string $domeDockControl = `dockControl 
        -label "Dome Text"
        //-area "right" //snap to the right side of the view next to the attribute editor
        -area "left"     //snap to the left side of the view next to the tool settings tab
        -content domeTextWin
        -floating 1
		    -height $domeWindowHeight
        -width $domeWindowWidth
        //-allowedArea "all"
        -allowedArea "left"
        -allowedArea "right"
        // Disabled for Maya 2011 compatibility testing
        //-floatChangeCommand "evalDeferred(\"dockControl -e -width $domeWindowWidth domeDockControl;dockControl -e -height $domeWindowHeight domeDockControl;\")"
        domeDockControl`;
  
  //Force the window back to the right size
  evalDeferred("dockControl -e -width $domeWindowWidth domeDockControl;dockControl -e -height $domeWindowHeight domeDockControl;");

  //Get the current window size
  print ("\nDome Text Window Size: " 
            + `dockControl -q -width domeDockControl` 
            + " width " 
            + `dockControl -q -height domeDockControl` 
            + " height\n");
  }else if ( $mayaVersion >= 2012 ) {
  //Make the Maya 2011 or higher window dockable
  string $domeDockControl = `dockControl 
        -label "Dome Text"
        //-area "right" //snap to the right side of the view next to the attribute editor
        -area "left"     //snap to the left side of the view next to the tool settings tab
        -content domeTextWin
        -floating 1
		    -height $domeWindowHeight
        -width $domeWindowWidth
        //-allowedArea "all"
        -allowedArea "left"
        -allowedArea "right"
        // Disabled for Maya 2011 compatibility testing
        -floatChangeCommand "evalDeferred(\"dockControl -e -width $domeWindowWidth domeDockControl;dockControl -e -height $domeWindowHeight domeDockControl;\")"
        domeDockControl`;
  
  //Force the window back to the right size
  evalDeferred("dockControl -e -width $domeWindowWidth domeDockControl;dockControl -e -height $domeWindowHeight domeDockControl;");

  //Get the current window size
  print ("\nDome Text Window Size: " 
            + `dockControl -q -width domeDockControl` 
            + " width " 
            + `dockControl -q -height domeDockControl` 
            + " height\n");
 
  } else{
    //Make the Maya 2010 or lower window a regular window type
    //showWindow $domeTextWindow;
    showWindow domeTextWin;
    
    //Get the current window size
    print ("\nDome Text Window Size: "  
             + `window -q -width domeTextWin` 
             + " width " 
             + `window -q -height domeTextWin` 
             + " height\n"); 
  }
}


//Load the generated image in the Maya Render View window
global proc loadInRenderView(){
  //Get the generated image filename
  string $filenameString = `textFieldButtonGrp -query -text textImageOutputName`;

  //Check if the generated image exists
  if (`filetest -f $filenameString`){
    print("Loading image " + $filenameString + " in the render view\n");
    //string $editor = `renderWindowEditor`;
    string $editor = "renderView";
    renderWindowEditor -edit -autoResize true -loadImage $filenameString $editor;
  }else{
    print("Image " + $filenameString + " does not exist.\n");
  }
}


global proc createDomeText(){
  python( "import sys" );

   //Check the operating system
  string $mayaPlatform = getMayaPlatform();
  
  //Check if we are running Maya 2011 or higher
  float $mayaVersion = getMayaVersion();
  print("Maya " + $mayaVersion + " on " + $mayaPlatform  + " detected.\n");

  //Convert 0-1 color values to a 0-255 range
  float $floatToEightBitColor = 256;
  
  //Font Controls
  int $fontId = `optionMenuGrp -query -select menuFontNameSelect`;
  string $fontName =`optionMenuGrp -query -value menuFontNameSelect`;
  int $fontSize = `intSliderGrp -query -value sliderPointSize`;
  float $kerningSize = `floatSliderGrp -query -value sliderKerningSize`;
  string $fontAlign = `optionMenuGrp -query -value menuFontAlignSelect`;
  string $fontStyle =`optionMenuGrp -query -value menuFontWeightSelect`;
  
  //Select "Maya File Texture" or "Mental Ray Texture" node generation
  int $textureFormat = `optionMenuGrp -query -select menuTextureFormat`;
  
  //Select the domeText geometry format: None:Plane:Cylinder:Dome
  int $domeShapeFormat = `optionMenuGrp -query -select menuShapeFormat`;
  //Write the geometry format as a plain text string
  string $domeShapeType = `optionMenuGrp -query -value menuShapeFormat`;
  
  //User entered text
  string $domeTextString = `scrollField -query -text scrollTextString`;
  
  //User entered Imagemagick custom text options
  string $imagemagickCustomText = `scrollField -query -text scrollImagemagickCustomText`;
  
  //Generated Filename
  //string $filenameString = `textFieldGrp -query -text textImageOutputName`;
  string $filenameString = `textFieldButtonGrp -query -text textImageOutputName`;

  //Generated image width and height in pixels
  string $imageWidth =`optionMenuGrp -query -value menuImageWidthSelect`;
  string $imageHeight = `optionMenuGrp -query -value menuImageHeightSelect`;
  
  //Color Swatches
  float $foregroundRGBcolor[] = `colorSliderGrp -query -rgb sliderForeColor`;
  float $backgroundRGBcolor[] = `colorSliderGrp -query -rgb sliderBackColor`;
  
  int $isbackgroundTransparent = `checkBox -query -value checkTransparentBackground`;
  
  //Debug Values
  print("Output Geometry: " + $domeShapeType + "\n");
  print("File texture node format: " + $textureFormat + "\n");
  print("Font: " + $fontName + " Font ID: " + $fontId + "\n");
  print("Font Style: " + $fontStyle + "\n");
  print("Point Size: " + $fontSize + "\n");
  print("Kerning Size: " + $kerningSize + "\n");
  
  print("Foreground Color: "  
  + $foregroundRGBcolor[0] + " " 
  + $foregroundRGBcolor[1] + " " 
  + $foregroundRGBcolor[2] + "\n"); 
  
  print("Background Color: " 
  + $backgroundRGBcolor[0] + " " 
  + $backgroundRGBcolor[1] + " " 
  + $backgroundRGBcolor[2] + " " 
  + "\n");
  
  print("Transparent BG: " + $isbackgroundTransparent + "\n");
  
  print("Image Filename: " + $filenameString + "\n");
  print("Image Size: " + $imageWidth + "x"+ $imageHeight + "\n");
  
  print("\nText: " + $domeTextString + "\n");
  
  print("\nImagemagick Custom Text: " + $imagemagickCustomText + "\n");
  
  //Speak the text aloud
  //system("say \"" + $domeTextString + "\"");
  
  // Create a custom text file
  $textFilenameString = ( `internalVar -userTmpDir` + "dometext.txt" );
  //$textFilenameString = $filenameString + ".txt";
  $fileId=`fopen $textFilenameString "w"`;
  fprint $fileId ($domeTextString + "\n");
  fclose $fileId;
  

  print ("Created: " + $textFilenameString + "\n");
    
  //Send the text commands to ImageMagick
  //Check the platform to come up with the correct syntax
  string $changeWorkingDir = "";
  string $imagemagickPath = "";

  if ($mayaPlatform  == "windows"){
    //Windows 32/x64
    //Warning: The domeconvert.exe program has the same name as a windows 7 system tool so you need to use the full windows file path with escaped quotes!

    //Debug testing alternate paths
    //$imagemagickPath = "\"C:\\Program Files\\Domemaster3D\\bin\\domeconvert.exe\"";
    //$imagemagickPath = "\"%PROGRAMFILES%\"\\Domemaster3D\\bin\\domeconvert.exe";
    //$imagemagickPath = " \"\"%PROGRAMFILES%\"\"\\Domemaster3D\\bin\\domeconvert.exe ";
   
   //Added to system path: ";C:\Program Files\Domemaster3D\bin"
    $imagemagickPath = "domeconvert.exe";
  }else if ($mayaPlatform  == "darwin"){
    //Mac OS X
    $imagemagickPath = "/opt/local/bin/convert";
  }else {  
    //Linux
    //$imagemagickPath = "convert";
    $imagemagickPath = "/opt/local/bin/convert";
  }
 
  //Pick the correct font settings for the current platform
  string $fontString = "";
  string $fontFolderPath;   

  //Select the fonts
  if ($mayaPlatform  == "windows"){
    //Windows 32/x64
    //$fontString = " -font \"" + "c:\\windows\\fonts\\courbd.ttf" + "\"";
    //$fontString =  " -font \"" + "Courier-New-Bold" + "\"";
    $fontFolderPath = "C:/Windows/Fonts/";
    $fontString =  " -font \"" + $fontFolderPath + $fontName + "\"";
  }else if ($mayaPlatform  == "darwin"){
    //Mac OS X
    //$fontString =  " -font \"" + "Courier" + "\"";
    $fontFolderPath = "/Library/Fonts/";
    $fontString =  " -font \"" + $fontFolderPath + $fontName + "\"";
  }else{  
    //Linux
    //$fontString =  " -font \"" + "Courier" + "\"";
    $fontFolderPath = "/usr/share/fonts/";
    $fontString =  " -font \"" + $fontFolderPath + $fontName + "\"";
  }

  //Set up the custom font styles
  string $fontStyleString = "";

  //start by adding the Unicode text encoding flag as the first item
  //$fontStyleString += " -encoding Unicode ";
  $fontStyleString += " -pointsize \"" + $fontSize + "\"";
  $fontStyleString += " -kerning \"" + $kerningSize + "\"";
  $fontStyleString += " -weight \"" + $fontStyle + "\"";
  $fontStyleString += " -size \"" + $imageWidth + "\"x";
   
   //Check if the image height is set to the automatic size mode
   if ($imageHeight != "(auto)"){
    $fontStyleString += "\"" + $imageHeight + "\"";
   }

  $fontStyleString += " -gravity " + $fontAlign; 

  //Create the text caption string elements
  //Pick the correct text caption settings for the current platform
  string $captionString = "";

  //Select the platform
  if ($mayaPlatform  == "windows"){
    //Windows 32/x64 - Use @file for text contents
    $captionString = " caption:@" + $textFilenameString;
  }else if ($mayaPlatform  == "darwin"){
    //Mac OS X - Use @file for text contents
    $captionString =  " caption:@" + $textFilenameString;
  }else{  
    //Linux - Use @file for text contents
    $captionString = " caption:@" + $textFilenameString;
  }

  //Checks for transparency and writes the background color to a string
  string $backgroundColorString = "";
  string $fillColorString = "";

  if ($isbackgroundTransparent){
    $backgroundColorString = " -background none";

    //extra imagemagick composite flag
    //$backgroundColorString = $backgroundColorString+ " -composite ";

  } else{
      $backgroundColorString = " -background \"rgb("
      + trunc($backgroundRGBcolor[0]*$floatToEightBitColor) + ", " 
      + trunc($backgroundRGBcolor[1]*$floatToEightBitColor) + ", " 
      + trunc($backgroundRGBcolor[2]*$floatToEightBitColor)
      + ")\"";
      
      // $backgroundColorString = " -background \"rgb("
      // + ceil($backgroundRGBcolor[0]*$floatToEightBitColor) + ", " 
      // + ceil($backgroundRGBcolor[1]*$floatToEightBitColor) + ", " 
      // + ceil($backgroundRGBcolor[2]*$floatToEightBitColor)
      // + ")\"";
  }

  //Write the foreground fill color values to a string
  $fillColorString = " -fill \"rgb("
      + trunc($foregroundRGBcolor[0]*$floatToEightBitColor) + ", " 
      + trunc($foregroundRGBcolor[1]*$floatToEightBitColor) + ", " 
      + trunc($foregroundRGBcolor[2]*$floatToEightBitColor)
      + ")\"";

  //$fillColorString = " -fill \"rgb("
      // + ceil($foregroundRGBcolor[0]*$floatToEightBitColor) + ", " 
      // + ceil($foregroundRGBcolor[1]*$floatToEightBitColor) + ", " 
      // + ceil($foregroundRGBcolor[2]*$floatToEightBitColor)
      // + ")\"";

  //Save the system console command string to a variable
  string $systemCommandString = "";

  $systemCommandString += $imagemagickPath;
  $systemCommandString += $backgroundColorString;
  $systemCommandString += $fillColorString;
  $systemCommandString += $fontString;
  $systemCommandString += $fontStyleString;
  $systemCommandString += $captionString;
  $systemCommandString += " " + $imagemagickCustomText + " ";
  $systemCommandString += " " + "\"" + $filenameString + "\"";
  $systemCommandString += "\n";
  
  print("DomeConvert Command: " + $systemCommandString + "\n");
  string $result = system($systemCommandString);
  print ("Feedback: " + $result + "\n");
   
   
  //Create a new dometext command log file for debugging
  //The log file is called DomeTextLog.txt and is stored in the user's temp directory
  $logFileNameString = ( `internalVar -userTmpDir` + "DomeTextLog.txt" );
  $logFileId = `fopen $logFileNameString "w"`;
  print ("Writing log file to: " + $logFileNameString + "\n");
  //Save command line log file
  fprint $logFileId ("DomeConvert Command: " + $systemCommandString + "\n");
  fprint $logFileId ("Feedback: " + $result + "\n");
  fclose $logFileId; 
   
  /*
  //Add the text string to the image as an embedded metadata tag
  string $commentString = "";

  //Use either the "-set comment" or "-set label" commands for metadata captions
  //Select the platform
  if ($mayaPlatform  == "windows"){
    //Windows 32/x64 - Use @file for text contents
    //$commentString = " -label @" + $textFilenameString;
    $commentString = " -set label \"Hello Domies\"";
  }else if ($mayaPlatform  == "darwin"){
    //Mac OS X - Use @file for text contents
    $commentString =  " -set label @" + $textFilenameString;
  }else{  
    //Linux - Use @file for text contents
    $commentString = " -set label @" + $textFilenameString;
  }
  
  $systemCommandString = "";
  $systemCommandString += $imagemagickPath;
  $systemCommandString += $commentString;
  $systemCommandString += " " + "\"" + $filenameString + "\"";
  $systemCommandString += "\n";
  
  print("Comment Command: " + $systemCommandString);
  string $result = system($systemCommandString);
  print ("Feedback: " + $result);
  */
  
  //Refresh the image file texture 
  //AEfileTextureReloadCmd file1.fileTextureName;
  
  //Get the file texture node name
  global string $texNodeName = "";
  
  //Generate the correct file texture node
  if($textureFormat == 1){
    //Create a new Maya file texture node
    //createDomeFileNode("sourceimages/bob2.png", {0.0, 1.0, 0.0});
    if ($isbackgroundTransparent){
      $texNodeName = createDomeFileNode( $filenameString, {0.0, 0.0, 0.0});
    }else{
      $texNodeName = createDomeFileNode( $filenameString, {$backgroundRGBcolor[0], $backgroundRGBcolor[1], $backgroundRGBcolor[2]});  
    } 
  }else if ($textureFormat == 2){
    //Create a new mental ray file texture node
    //createDomeMrFileNode("sourceimages/bob2.png", {0.0, 1.0, 0.0});
    if ($isbackgroundTransparent){
      $texNodeName = createDomeMrFileNode( $filenameString, {0.0, 0.0, 0.0});
    }else{
      $texNodeName = createDomeMrFileNode( $filenameString, {$backgroundRGBcolor[0], $backgroundRGBcolor[1], $backgroundRGBcolor[2]});
    }
  }else if ($textureFormat == 3){
    print("Skipping file texture node creation.\n");
  } //End of file texture node generation
    
  //Create the note message if generating a Maya or Mental Ray node 
  if ( ($textureFormat == 1) || ($textureFormat == 2)) {
    //Write the Dome Text message to the domeText Note fields:
    print("Adding note to " + $texNodeName + " file node\n");
    string $domeTextNoteString = "";
    $domeTextNoteString += $domeTextString;
    //Write the settings to the attribute editor note fields
    setNotesAttribute( $texNodeName, "notes", "nts", "string", `scrollField -edit -text $domeTextNoteString AENotesScrollField`); 
  } //end note generation  
  
  //Regenerate the Text Presets option menu after adding a new node
  buildTextPresetMenu();
  
  //Display the texture node in the attribute editor
  evalDeferred("showEditorExact ($texNodeName);");
}


global proc string chooseDomeGeometry(){
  //Select the domeText geometry format: None:Plane:Cylinder:Dome
  int $domeShapeFormat = `optionMenuGrp -query -select menuShapeFormat`;
  
  string $domeGeometry = "";

  //Check what type of supporting geometry is required
  if ( $domeShapeFormat == 1 ){
    print("Skipping geometry creation\n");
    $domeGeometry = "";
  } else if ( $domeShapeFormat == 2 ){
    print("Creating a new DomeText polygon plane surface.\n");
    $domeGeometry = createDomePlane();
  } else if ( $domeShapeFormat ==3 ){
    print("Creating a new DomeText cylinder surface.\n");
    //$domeGeometry = "pCylinder";
    $domeGeometry = "";
  } else if ( $domeShapeFormat == 4 ){
    print("Creating a new DomeText dome surface.\n");
    //$domeGeometry = "pDome";
    $domeGeometry = "";
  }
  
  return $domeGeometry;
}


//Create a supporting Polygon Plane Surface
global proc string createDomePlane(){
  //image Size
  float $imageWidth = `optionMenuGrp -query -value menuImageWidthSelect`;
  int $imageMode =`optionMenuGrp -query -select menuImageHeightSelect`-1;
  float $imageHeight = 0.0;
  
  float $polygonHeight = `floatSliderGrp -query -value sliderPolyPlaneSize`;
  float $polygonWidth = 0;
  
  //Check if the (auto) mode was enabled
  if ( $imageMode ){
    $imageHeight  = `optionMenuGrp -query -value menuImageHeightSelect`;
  } else {
    print("Automatic image height setting detected. Using a preset 1:1 aspect ratio setting.\n");
    $imageHeight  = $imageWidth;
  }
  
  //Calculate the image aspect ratio
  float $imageAspectRatio = $imageWidth / $imageHeight ;
  print("Image Aspect ratio: " + $imageAspectRatio + ":1\n");
  //Image Dimensions
  print("Image Size: " + $imageWidth + "x" + $imageHeight + "\n");
  //Calculate the polygon size based upon the aspect Ratio
  $polygonWidth = $polygonHeight * $imageAspectRatio;
  print("Polygon Size: " + $polygonWidth + "x" + $polygonHeight + "\n");
  
  // Set up the polygon plane direction
  //"enum" -en "Right (X):Top (Y):Front (Z):" $nodeName;
  //Creation Axis: Right (X):Top (Y): Front (Z)
  
  int $planeDirection = `optionMenuGrp -query -select menuDomeOrientationAxis`-1;

  //int $planeDirection = 1;
  int $planeCreationAxis[3] = {0,0,0};
  
  if ( $planeDirection == 0 ){
    //Right (X)
    $planeCreationAxis = {1,0,0};
  } else if ( $planeDirection == 1 ){
    //Top (Y)
    $planeCreationAxis = {0,1,0};
  }else if ( $planeDirection == 2 ){
    //Front (Z)
    $planeCreationAxis = {0,0,1};
  }
  
  //Create a polygon plane for the text card
  string $domeTextPlane[] = `polyPlane -w 1 -h 1 -sx 1 -sy 1 -ax $planeCreationAxis[0] $planeCreationAxis[1] $planeCreationAxis[2]-cuv 2 -ch 1 -name "DomeTextPlane"`;
  
  //Resize the correct dimension
  if ( $planeDirection == 0 ){
    //Right (X)
    //Resize the polygon plane
    setAttr ($domeTextPlane[0]+".scaleZ") $polygonWidth;
    setAttr ($domeTextPlane[0]+".scaleY") $polygonHeight;
  } else if ( $planeDirection == 1 ){
    //Top (Y)
    //Resize the polygon plane
    setAttr ($domeTextPlane[0]+".scaleX") $polygonWidth;
    setAttr ($domeTextPlane[0]+".scaleZ") $polygonHeight;
  }else if ( $planeDirection == 2 ){
    //Front (Z)
    //Resize the polygon plane
    setAttr ($domeTextPlane[0]+".scaleX") $polygonWidth;
    setAttr ($domeTextPlane[0]+".scaleY") $polygonHeight;
  }

  return $domeTextPlane[0];
}

