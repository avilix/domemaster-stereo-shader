/*
Create the Domemaster3D Main Menu in the Rendering menu set
Dec 18, 2013 v1.4 Beta 10
------------------------------------------------------------------------------

Notes:
gMainRenderMenu
gMainCreateMenu
Create->Cameras

//Find a menu bar command
findMenuItem;

//List menu sets:
string $menuSets[] = `menuSet -allMenuSets`;
//Result: commonMenuSet animationMenuSet polygonsMenuSet surfacesMenuSet dynamicsMenuSet renderingMenuSet nDynamicsMenuSet 
 
//Remove old menu
deleteUI mainDomemaster3DMenu;

//Load the menus using:
source "domeMenu.mel";
createDomemaster3DMenu();

*/


//Check what Maya version is active
global proc int getMayaVersionDome(){
  // Check if we are running Maya 2011 or higher
  float $mayaVersion = `getApplicationVersionAsFloat`;

  // Test this GUI using the Maya 2010 - non-docked GUI mode
  //float $mayaVersion = 2010;

  // Write out the current Maya version number
  //print("Maya " + $mayaVersion + " detected.\n");

  return $mayaVersion;
}

  
//Check the operating system
global proc string getMayaPlatform(){
  //-------------------------------------------------
  //Get the current Maya Platform using python
  //      The $mayaPlatform options are:
  //          "windows", "darwin", "linux"
  //-------------------------------------------------

  string $mayaPlatform = "";
  python( "import sys" );

  if( python( "sys.platform == 'win32'" ) ){
    $mayaPlatform = "windows";
  }else if( python( "sys.platform == 'windows'" ) ){
    $mayaPlatform = "windows";
  }else if( python( "sys.platform == 'darwin'" ) ){
    $mayaPlatform = "darwin";
  }else {
    $mayaPlatform = "linux";
  }

  //print("Running on " + $mayaPlatform + ".\n");
  return $mayaPlatform;
}



//Create the "Choose a Default Stereo Rig" submenu
global proc createDomeRigSubmenu(){

	popupMenu -edit -deleteAllItems domeDefaultRigMenu;
  setParent -menu domeDefaultRigMenu;
  
  //remove any existing submenus
  // if (`menu -query -exists domeDefaultRigMenu`){
    // print("Replacing the existing domeDefaultRigMenu item.\n");
    // deleteUI domeDefaultRigMenu;
  // }
  
  //remove any existing radio submenu collections
  if (`menu -query -exists domeRigSubMenuCollection`){
    print("Replacing the existing domeRigSubMenuCollection item.\n");
    deleteUI domeRigSubMenuCollection;
  }

  radioMenuItemCollection	domeRigSubMenuCollection;
  
  //Create a sub menu using the list of active stereoRigManager rigs
  int $i = 0;
  global string $domeActiveRig;
  string $rigs[] = `stereoRigManager -listRigs`;
  string $defaultRig =  `stereoRigManager -query -defaultRig`;  
  string $funcName = "";
  int $isCurrent;
  
  for ($domeActiveRig in $rigs) {
    //Check if this is the default rig
    
    if($defaultRig == $domeActiveRig){
      $isCurrent = true;
    }else{
      $isCurrent = false;
    }
    
    print ("Camera Rig: " + $domeActiveRig + " Default: " + $isCurrent + "\n");
    
    //Build the radio button item's command string
    $funcName = "";
    $funcName += "print(\"Changing the default stereo rig to: " + $domeActiveRig + "\\n\");";
    $funcName += "stereoRigManager -defaultRig " + $domeActiveRig + ";";

    //Build the radio button menu item
    menuItem 
        -label $domeActiveRig
        -radioButton ($isCurrent)
        -collection domeRigSubMenuCollection
        -parent domeDefaultRigMenu
        -command $funcName
        ("domeRadioSubMenu" + $i);
        
     $i += 1;
  }
  
  //Set the default rig
  //stereoRigManager -defaultRig $defaultRig;
  
  //menuItem 
  // -label "stereoCamera"
  // -radioButton 0
  // -collection domeRigSubMenuCollection
  // ("stereoCamera" + "RadioSubMenu");
  
  //menuItem 
  // -label "domeStereoCamera"
  // -radioButton 1
  // -collection domeRigSubMenuCollection
  // ("domeStereoCamera" + "RadioSubMenu");  
  
  setParent -menu DomeCamerasMenu;  
}


// -----------------------------------------------------------------
// Create the Domemaster3D Menu
// -----------------------------------------------------------------
global proc createDomemaster3DMenu() {

  global string $gMainWindow;

  //remove any existing Domemaster3D menus
  if (`menu -query -exists mainDomemaster3DMenu`){
    print("Replacing the existing Domemaster3D menu item.\n");
    deleteUI mainDomemaster3DMenu;
  }
  
  //Create the Domemaster3D Menu
  setParent $gMainWindow;
  menu 
    -label "Domemaster3D" 
    -tearOff true 
    mainDomemaster3DMenu;

  menuSet 
    -currentMenuSet 
    renderingMenuSet;
  
  menuSet 
    -addMenu 
    mainDomemaster3DMenu 
    renderingMenuSet;

  updateMenuMode;
  updateMenuModeUI;
  
  setParent 
    -menu 
    mainDomemaster3DMenu;
  
  menuItem 
    -subMenu true 
    -tearOff true 
    -label "Dome Cameras" 
    DomeCamerasMenu;
      menuItem 
        -label "LatLong Camera" 
        -command "python(\"import domeCamera\\nreload(domeCamera)\\ndomeCamera.createLatLong_Camera()\")";

      menuItem -divider true;

      menuItem 
        -label "Domemaster WxH Camera" 
        -command "python(\"import domeCamera\\nreload(domeCamera)\\ndomeCamera.createDomeAFL_WxH_Camera()\")";
      menuItem 
        -label "Domemaster FOV Camera" 
        -command "python(\"import domeCamera\\nreload(domeCamera)\\ndomeCamera.createDomeAFL_FOV_Camera()\")";

      menuItem -divider true;
      
      menuItem 
        -label "Domemaster3D FOV Camera" 
        -command "python(\"import domeCamera\\nreload(domeCamera)\\ndomeCamera.createFulldomeStereoRig()\")";
               
      menuItem 
        -label "Dome Texture" 
        -command "python(\"import domeCamera\\nreload(domeCamera)\\ndomeCamera.createRobLookup()\")";
      menuItem 
        -label "Dome Ramp" 
        -command "python(\"import domeCamera\\nreload(domeCamera)\\ndomeCamera.createDomeRampTexture()\")";

      menuItem -divider true;

      // Check if we are running Maya 2011 or higher
      float $mayaVersion = getMayaVersionDome();
      if ($mayaVersion >=2011){
        menuItem 
          -subMenu true 
          -tearOff true 
          -label "Choose a Default Stereo Rig"
          -postMenuCommand "createDomeRigSubmenu()"
          domeDefaultRigMenu;      
          
        setParent -menu ..;   
      } //End of 2011+ check
    
    setParent -menu ..;
    
  menuItem -divider true;
  
  menuItem 
    -label "Create Reference Grid" 
    -command "python(\"import domeCamera\\nreload(domeCamera)\\ndomeCamera.createDomeGrid()\")";
  menuItem 
    -label "Create Starglobe" 
    //-command "python(\"import domeMaterial\nreload(domeMaterial)\ndomeMaterial.createStarglobe()\")";
    -command "source \"domeStarglobe.mel\";\ncreateStarglobe();";
  menuItem 
    -label "Create Galaxy" 
    -command "source \"galaxyCreator.mel\";galaxyCreator();";
  menuItem 
    -label "Create DomeText" 
    -command "source \"domeText.mel\";domeText();";
  menuItem 
    -label "Create DomeViewer" 
    -command "source \"domeViewer.mel\";\ndomeViewer();"; 
 
  menuItem -divider true;
  
  menuItem 
    -label "Create Color Material" 
    -command "python(\"import domeMaterial\\nreload(domeMaterial)\\ndomeMaterial.createColorMiaMaterial()\");";
  menuItem 
    -label "Create Color + Bump Material" 
    -command "python(\"import domeMaterial\\nreload(domeMaterial)\\ndomeMaterial.createColorBumpMiaMaterial()\")";

  menuItem -divider true;
  
  menuItem 
    -label "Domemaster3D Version Info" 
    -command "source \"domeVersion.mel\";domeVersion();";
  menuItem 
    -label "Domemaster3D Wiki Help" 
    -command "python(\"import domeCamera\\nreload(domeCamera)\\ndomeCamera.openDomemasterWiki()\");";
}

//Create the menu
//createDomemaster3DMenu();